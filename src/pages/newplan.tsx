
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import React, {
  useState,
  useTransition,
  useRef,
  useEffect,
  HtmlHTMLAttributes,
} from "react";
import {
  ClerkProvider,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  useUser,
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton,
} from "@clerk/nextjs";
import { userAgent } from "next/server";
import { userInfo } from "os";
import { boolean } from "zod";
import type {
  User,
  Workout,
  WorkoutPlan,
  ActualWorkout,
  ActualExercise,
  exerciseSet,
  WorkoutPlanTwo,
} from "@prisma/client";
import { prisma } from "~/server/db";
import { empty } from "@prisma/client/runtime";
import { SourceTextModule } from "vm";
import { v4 } from "uuid";
import { existsSync } from "fs";
import { create } from "domain";
import { useRouter } from "next/router";
import { describe } from "node:test";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-gradient-to-b   from-[#000000]  to-[#44454b]  text-white">
        <nav className="flex items-center justify-between">
          <SignedIn>
            <div className="m-2 flex flex-col text-white ">
              <UserButton
                appearance={{
                  elements: { userButtonAvatarBox: { width: 45, height: 45 } },
                }}
              />
            </div>
          </SignedIn>
          <div className="flex space-x-6 pr-4">
            <Link
              href="home"
              className="text-gray-300 hover:text-white hover:underline"
            >
              Home
            </Link>
            <Link
              href="makeplan"
              className="text-gray-300 hover:text-white hover:underline"
            >
              Edit Plan
            </Link>
            <Link
              href="allworkouts"
              className="text-gray-300 hover:text-white hover:underline"
            >
              History
            </Link>
          </div>
        </nav>
        <div>
          <SignedIn>
            <br></br>
            <NewWorkoutMenu />
            <br></br>
            <div></div>
          </SignedIn>
          <SignedOut>
            {/* Signed out users get sign in button */}
            <SignInButton redirectUrl="home">
              <button className="rounded-full bg-gray-700 p-3 text-xl text-white hover:bg-gray-600">
                Sign In
              </button>
            </SignInButton>
          </SignedOut>
        </div>
      </main>
    </>
  );
};

export default Home;


const emptySet = { rir: 3, reps: 5, weight: 0 };

type ExerciseTemplate = {
  id: string;
  description: string;
  sets: SetTemplate[];
};

type SetTemplate = {
  weight: number;
  reps: number;
  rir: number;
};

type WorkoutTemplate = {
  description: string;
  nominalDay: string;
  workoutId: string;
  exercises: (ExerciseTemplate & {sets: SetTemplate[]})[];
};

function NewWorkoutMenu() {
  const [workoutPlan, setWorkoutPlan] = useState<
    | (WorkoutTemplate)[]
    | undefined
  >();

  function addWorkoutToNewPlan(workout:WorkoutTemplate) {
    console.log('adding: ')
    console.log(workout);
    if (!workout) {
      return;
    }
    const newWorkoutPlan = workoutPlan ? [...workoutPlan, workout] : [workout];
    setWorkoutPlan(newWorkoutPlan);
    console.log(newWorkoutPlan)
  }


  return (
    <div className="flex flex-col items-center rounded-lg text-white">
        <WorkoutDisplay plan={workoutPlan}/>
        <WorkoutDayForm 
            addWorkout={addWorkoutToNewPlan}
        />
        {workoutPlan && <SaveButton />}
    </div>
  );
}

function SaveButton(){
    return(<div>
        <button
        className="mt-4 rounded bg-green-600 px-2 py-1 font-bold text-white hover:bg-green-700"
        >
            Save Plan
        </button>
    </div>)
}

interface WorkoutDisplayProps {
    plan: WorkoutTemplate[] | undefined
}

function WorkoutDisplay( {plan} : WorkoutDisplayProps){

    if (!plan){ return (<div></div>)}
    return(
        <div>
            {plan && plan?.map((workout) => (
                <div key={workout.description}>
                    <div>{workout.description}: {workout.nominalDay}</div>
                <div>{workout.exercises.map((exercise) => (
                    <div>{exercise.description}</div>
                ))}</div>
                </div>
            )
            )}
        </div>
    )
}

function createUniqueId(): string {
  return v4();
}


interface WorkoutDayFormProps {
  addWorkout: (workout: WorkoutTemplate) => void;
}

function WorkoutDayForm({ addWorkout }: WorkoutDayFormProps) {
  const [dayDescription, setDayDescription] = useState("");
  const [nominalDay, setNominalDay] = useState("");
  const [showAddExercises, setShowAddExercises] = useState(false);

  const { mutate: saveNewWorkout } =
    api.getWorkouts.updateWorkoutPlan.useMutation({
      onSuccess(data) {
        console.log(data);
        //addWorkout(data);
      },
    });

  function handleAddExercises() {
    console.log(dayDescription, nominalDay);
    if (dayDescription && nominalDay) {
      setShowAddExercises(true);
    }
  }
  function updateWorkoutPlan(exercises: ExerciseTemplate[]) {
    if (dayDescription && nominalDay) {
      const newWorkoutPlan: WorkoutTemplate = {
        workoutId: createUniqueId(),
        description: dayDescription,
        nominalDay: nominalDay,
        exercises: exercises,
      };
      addWorkout(newWorkoutPlan);
      //console.log("Plan Id: ", planId);
      //if (planId) {
        ////saveNewWorkout({ ...newWorkoutPlan, planId: planId });
      //} else {
        ////saveNewWorkout({ ...newWorkoutPlan, planId: createUniqueId() });
      //}

      //addWorkout(newWorkoutPlan);
      setShowAddExercises(false);
      setDayDescription("");
      setNominalDay("");
    }
  }
  const inputRef = useRef<HTMLInputElement | null>(null);

  return (
    <div className="flex flex-col items-center justify-center">
      {!showAddExercises && (
        <form onSubmit={handleAddExercises}>
          <div className="space-y-5">
            <div className="rounded-lg bg-gray-900 p-5 text-white">
              <label className="font-bold">Day Description:</label>
              <input
                required
                ref={inputRef}
                value={dayDescription}
                onChange={(event) => setDayDescription(event.target.value)}
                className="w-full rounded-lg bg-gray-700 p-1 text-white focus:outline-none"
                type="text"
              ></input>
              <div>
                <label className="font-bold">Nominal Day: </label>
                <select
                  value={nominalDay}
                  onChange={(event) => setNominalDay(event.target.value)}
                  required
                  className="w-full rounded-lg bg-gray-700 p-1 text-white focus:outline-none"
                >
                  <option value="">Select Day</option>
                  <option value="Monday">Monday</option>
                  <option value="Tuesday">Tuesday</option>
                  <option value="Wednesday">Wednesday</option>
                  <option value="Thursday">Thursday</option>
                  <option value="Friday">Friday</option>
                  <option value="Saturday">Saturday</option>
                  <option value="Sunday">Sunday</option>
                </select>
              </div>
              <button
                type="submit"
                className="mt-4 rounded bg-blue-600 px-2 py-1 font-bold text-white hover:bg-blue-700"
              >
                Add Exercsies
              </button>
            </div>
          </div>
        </form>
      )}
      <br></br>
      {showAddExercises && <AddExerciseForm 
      description={dayDescription}
      nominalDay={nominalDay}
      updatePlan={updateWorkoutPlan} />}
      <br></br>
    </div>
  );
}

interface AddExerciseFormProps {
  updatePlan: (exercise: ExerciseTemplate[]) => void;
  description: string;
  nominalDay: string;
}

function AddExerciseForm({ updatePlan, description, nominalDay }: AddExerciseFormProps) {
  const [exercises, setExercises] = useState<ExerciseTemplate[]>();

  function saveExercises() {
    if (exercises) {
      updatePlan(exercises);
      setExercises([]);
    }
  }
  return (
    <div className="flex flex-col items-center justify-center rounded-lg bg-gray-900 text-white">
        <div>{description}: {nominalDay}</div>
      <div className="">
        {exercises?.map((exercise, index) => (
          <div key={index} className="pt-2 font-semibold">
            {exercise.description}: {exercise?.sets[0]?.weight} x{" "}
            {exercise.sets.length}
          </div>
        ))}
      </div>
      <div className="w-full">
        <NewExercise setExercises={setExercises} exercises={exercises} />
      </div>
      <button
        onClick={saveExercises}
        className="mt-4 rounded bg-blue-600 px-2 py-1 font-bold text-white hover:bg-blue-700"
      >
        Save Day
      </button>
    </div>
  );
}

interface NewExerciseProps {
  exercises: ExerciseTemplate[] | undefined;
  setExercises: React.Dispatch<
    React.SetStateAction<ExerciseTemplate[] | undefined>
  >;
}

function NewExercise({ exercises, setExercises }: NewExerciseProps) {
  const [description, setDescription] = useState("");
  const [weight, setWeight] = useState(0);
  const [reps, setReps] = useState(5);
  const [sets, setSets] = useState(1);
  const inputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (sets) {
      const newExercise: ExerciseTemplate = {
        id: createUniqueId(),
        description: description,
        sets: Array(sets).fill({
          ...emptySet,
          weight: weight,
          reps: reps,
        }) as SetTemplate[],
      };
      if (exercises) {
        const newExercises: ExerciseTemplate[] = [...exercises, newExercise];
        setExercises(newExercises);
        console.log(newExercises);
      } else {
        setExercises([newExercise]);
        console.log(newExercise);
      }
    }
    inputRef.current?.focus();
    setDescription("");
    setWeight(0);
    setSets(1);
  };
  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setDescription(event.target.value);
  };
  const handleRepsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setReps(parseInt(event.target.value));
  };
  const handleWeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWeight(parseInt(event.target.value));
  };
  const handleSetsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSets(parseInt(event.target.value));
  };

  return (
    <div className="flex flex-row justify-center rounded-lg bg-gray-900 p-5 text-white">
      <form
        onSubmit={handleSubmit}
        className="w-full items-center justify-center space-y-1"
      >
        <div className=" w-full p-1  sm:w-auto">
          <label htmlFor="description" className="mr-2">
            Exercise:
          </label>
          <div className="flex items-center">
            <input
              id="description"
              type="text"
              ref={inputRef}
              required
              className="w-full rounded-md bg-gray-800 px-2 py-1 text-white focus:outline-none sm:w-48"
              value={description}
              onChange={handleDescriptionChange}
            />
          </div>
        </div>
        <div className="flex w-full flex-row space-x-4">
          <div className="w-full sm:w-auto">
            <label htmlFor="weight" className="mr-2">
              Weight:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-14 rounded-md bg-gray-800 px-2 py-1 text-center text-white focus:outline-none"
                value={weight}
                onChange={handleWeightChange}
              />
            </div>
          </div>
          <div className=" w-full sm:w-auto ">
            <label htmlFor="weight" className="mr-2">
              Reps:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-12 rounded-md bg-gray-800 px-2 py-1 text-center text-white focus:outline-none"
                value={reps}
                onChange={handleRepsChange}
              />
            </div>
          </div>

          <div className=" w-full sm:w-auto ">
            <label htmlFor="sets" className="mr-2">
              Sets:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="sets"
                type="number"
                min="1"
                required
                className="w-12 rounded-md bg-gray-800 px-2 py-1 text-center text-white focus:outline-none"
                value={sets}
                onChange={handleSetsChange}
              />
            </div>
          </div>
        </div>

        <div className="flex justify-center">
          <button
            type="submit"
            className="mt-4 rounded bg-blue-600 px-2 py-1 font-bold text-white hover:bg-blue-700"
          >
            Add Exercise
          </button>
        </div>
      </form>
    </div>
  );
}