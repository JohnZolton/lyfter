import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import React, { useState, useTransition } from "react";
import {
  ClerkProvider,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  useUser,
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton,
} from "@clerk/nextjs";
import { userAgent } from "next/server";
import { userInfo } from "os";
import { boolean } from "zod";
import type {
  User,
  Workout,
  WorkoutPlan,
  ActualWorkout,
  ActualExercise,
  exerciseSet,
  WorkoutPlanTwo,
} from "@prisma/client";
import { prisma } from "~/server/db";
import { empty } from "@prisma/client/runtime";

//@refresh reset

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-gradient-to-b   from-[#000000]  to-[#44454b] text-center text-white">
        <nav className="bg-black-500 flex flex-wrap">
          <SignedIn>
            <div className="flex flex-col p-4 text-white ">
              <UserButton
                appearance={{
                  elements: { userButtonAvatarBox: { width: 60, height: 60 } },
                }}
              />
            </div>
          </SignedIn>
          <div className="flex items-center justify-between">
            <Link
              href="home"
              className=" m-2 text-slate-200 hover:text-white hover:underline"
            >
              Home
            </Link>
            <Link
              href="makeplan"
              className="m-2 text-slate-200 hover:text-white"
            >
              Edit Plan
            </Link>
            <Link
              href="allworkouts"
              className="m-2 text-slate-200 hover:text-white"
            >
              History
            </Link>
          </div>
        </nav>
        <div>
          <SignedIn>
            <br></br>
            <NewWorkoutUi />
            <br></br>
            <div></div>
          </SignedIn>
          <SignedOut>
            {/* Signed out users get sign in button */}
            <SignInButton redirectUrl="home">
              <button className="rounded-full bg-white p-3 text-xl text-black">
                Sign In
              </button>
            </SignInButton>
          </SignedOut>
        </div>
      </main>
    </>
  );
};

export default Home;

function NewWorkoutUi() {
  return (
    <div>
      <TestButton></TestButton>
      <br></br>
      <div>or make your own</div>
      <br></br>
      <WorkoutPlanForm />
      <br></br>
      {
        //<WorkoutDisplay />
      }
    </div>
  );
}

function WorkoutPlanForm() {
  const [workoutPlan, setWorkoutPlan] = useState<WorkoutTemplate[] | undefined>(
    undefined
  );
  function addWorkout(workout: WorkoutTemplate) {
    console.log(workout);
    const newWorkoutPlan = workoutPlan ? [...workoutPlan, workout] : [workout];
    setWorkoutPlan(newWorkoutPlan);
  }

  return (
    <div className="flex items-center justify-center">
      <div className="max-w-fit bg-black p-5">
        <WorkoutDisplay3 workoutPlan={workoutPlan} />
        <WorkoutDayForm addWorkout={addWorkout} />
      </div>
    </div>
  );
}

interface WorkoutDayFormProps {
  addWorkout: (workout: WorkoutTemplate) => void;
}

function WorkoutDayForm({ addWorkout }: WorkoutDayFormProps) {
  const [dayDescription, setDayDescription] = useState("");
  const [nominalDay, setNominalDay] = useState("");
  const [showAddExercises, setShowAddExercises] = useState(false);
  const [workoutDayPlan, setWorkoutDayPlan] = useState<
    WorkoutTemplate | undefined
  >(undefined);

  function handleAddExercises() {
    console.log(dayDescription, nominalDay);
    if (dayDescription && nominalDay) {
      setShowAddExercises(true);
    }
  }
  function updateWorkoutPlan(exercises: ExerciseTemplate[]) {
    if (dayDescription && nominalDay) {
      const newWorkoutPlan: WorkoutTemplate = {
        description: dayDescription,
        nominalDay: nominalDay,
        exercises: exercises,
      };
      setWorkoutDayPlan(newWorkoutPlan);
      console.log(newWorkoutPlan);
      addWorkout(newWorkoutPlan);
    }
  }

  return (
    <div className="flex items-center justify-center">
      <div className="max-w-fit bg-black p-5">
        <label>Day Description:</label>
        <input
          value={dayDescription}
          onChange={(event) => setDayDescription(event.target.value)}
          className="text-black"
          type="text"
        ></input>
        <br></br>
        <br></br>
        <div>
          <label>Nominal Day: </label>
          <input
            value={nominalDay}
            onChange={(event) => setNominalDay(event.target.value)}
            className="text-black"
            type="text"
          ></input>
        </div>
        <br></br>
        <button
          onClick={handleAddExercises}
          className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
        >
          Add Exercsies
        </button>
        <br></br>
        <br></br>
        <AddExerciseForm updatePlan={updateWorkoutPlan} />
        <br></br>
      </div>
    </div>
  );
}

interface AddExerciseFormProps {
  updatePlan: (exercise: ExerciseTemplate[]) => void;
}

function AddExerciseForm({ updatePlan }: AddExerciseFormProps) {
  const [exercises, setExercises] = useState<ExerciseTemplate[]>();
  function saveExercises() {
    if (exercises) {
      updatePlan(exercises);
      setExercises([]);
    }
  }
  return (
    <div>
      <div>
        {exercises?.map((exercise) => (
          <div key={exercise.description}>
            {exercise.description}: {exercise?.sets[0]?.weight} x{" "}
            {exercise.sets.length}
          </div>
        ))}
      </div>
      <div>
        <NewExercise setExercises={setExercises} exercises={exercises} />
      </div>
      <button
        onClick={saveExercises}
        className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
      >
        Save Day
      </button>
    </div>
  );
}

interface NewExerciseProps {
  exercises: ExerciseTemplate[] | undefined;
  setExercises: React.Dispatch<
    React.SetStateAction<ExerciseTemplate[] | undefined>
  >;
}

function NewExercise({ exercises, setExercises }: NewExerciseProps) {
  const [description, setDescription] = useState("");
  const [weight, setWeight] = useState(0);
  const [reps, setReps] = useState(5);
  const [sets, setSets] = useState<SetTemplate[]>();

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (sets) {
      const newExercise: ExerciseTemplate = {
        description: description,
        sets: sets,
      };
      if (exercises) {
        const newExercises: ExerciseTemplate[] = [...exercises, newExercise];
        setExercises(newExercises);
      } else {
        setExercises([newExercise]);
      }
    }
    setDescription("");
    setWeight(0);
    setSets([]);
  };
  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setDescription(event.target.value);
  };
  const handleRepsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setReps(parseInt(event.target.value));
  };
  const handleWeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWeight(parseInt(event.target.value));
  };
  const handleSetsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSets(
      Array(parseInt(event.target.value)).fill({
        ...emptySet,
        weight: weight,
        reps: reps,
      })
    );
  };

  return (
    <div className="flex justify-center flex-row ">
      <form onSubmit={handleSubmit} className="justify-center items-center">
        <div className="mb-4 w-full sm:w-auto bg-red-500 p-1">
          <label htmlFor="description" className="mr-2">
            Exercise:
          </label>
          <div className="flex items-center">
            <input
              id="description"
              type="text"
              required
              className="sm:w-48  text-black"
              value={description}
              onChange={handleDescriptionChange}
            />
          </div>
        </div>
          <div className="flex flex-row w-full">
          <div className="mb-4 w-full sm:w-auto bg-slate-400">
            <label htmlFor="weight" className="mr-2">
              Weight:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-14 text-black text-center"
                value={weight}
                onChange={handleWeightChange}
              />
            </div>
          </div>
          <div className="mb-4 w-full sm:w-auto bg-slate-700">
            <label htmlFor="weight" className="mr-2">
              Reps:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-12 text-black text-center"
                value={reps}
                onChange={handleRepsChange}
              />
            </div>
          </div>

          <div className="mb-4 w-full sm:w-auto bg-slate-400">
            <label htmlFor="sets" className="mr-2">
              Sets:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="sets"
                type="number"
                min="1"
                required
                className="w-12 text-black text-center"
                value={sets?.length || 1}
                onChange={handleSetsChange}
              />
            </div>
          </div>
        </div>

        <div className="ml-auto">
          <button
            type="submit"
            className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
          >
            Add Exercise
          </button>
        </div>
      </form>
    </div>
  );
}

interface NewDayProps {
  day: string;
  updatePlan: (newDay: WorkoutTemplate) => void;
}

function NewDay({ day, updatePlan }: NewDayProps) {
  const [exercises, setExercises] = useState<ExerciseTemplate[]>();
  const [description, setDescription] = useState("");
  const [submittedDescription, setSubmittedDescription] = useState("");
  const [descriptionset, setdescriptionset] = useState(false);
  const [daySaved, setDaySaved] = useState(false);

  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setDescription(event.target.value);
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setSubmittedDescription(description);
    setdescriptionset(true);
  };
  //need to have a running day plan and populate with exercises as they add
  const handleSetDay = () => {
    if (description && exercises) {
      const dayWorkout: WorkoutTemplate = {
        description: description,
        nominalDay: day,
        exercises: exercises,
      };
      console.log("newday comp");
      console.log(dayWorkout);
      setDescription("");
      updatePlan(dayWorkout);
      setDaySaved(true);
    }
  };

  return (
    <div className="mx-auto max-w-md">
      <div className="w-full sm:w-1/4">{day}</div>
      <div>
        {!submittedDescription && (
          <form onSubmit={handleSubmit} className="mb-4">
            <div className="flex flex-wrap">
              <div className="mb-2 flex items-center sm:mb-0 sm:w-1/4">
                <label className="mr-2">Description:</label>
                <input
                  type="text"
                  className="w-full max-w-xs rounded-md border border-gray-300 px-4 py-2 text-black"
                  value={description}
                  onChange={handleDescriptionChange}
                />
              </div>
            </div>
            <div className="flex w-full justify-end sm:w-3/4">
              <button
                type="submit"
                className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
              >
                Enter
              </button>
            </div>
          </form>
        )}
        {submittedDescription && (
          <div className="mb-4">{submittedDescription}</div>
        )}
      </div>

      {exercises && (
        <div className="mb-4 flex flex-col">
          <table className="min-w-full divide-y">
            <thead>
              <tr>
                <th className="py-2">Description</th>
                <th className="py-2">Weight</th>
                <th className="py-2">Sets</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {exercises.map((exercise) => (
                <tr key={exercise.description}>
                  <td className="py-2">{exercise.description}</td>
                  <td className="py-2">{exercise.sets.length}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {!daySaved && descriptionset && (
        <NewExercise exercises={exercises} setExercises={setExercises} />
      )}

      {!daySaved && descriptionset && (
        <button
          onClick={handleSetDay}
          className="m-2 rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
        >
          Save Day
        </button>
      )}
    </div>
  );
}

function MakePplSplit() {
  const { mutate: makePlan, isLoading } =
    api.getWorkouts.newTestPlan.useMutation({
      onSuccess(data, variables, context) {
        console.log(data);
        window.location.reload();
      },
    });

  function handleClick() {
    makePlan({ workouts: pplPlanArray });
  }
  return (
    <div>
      <div className="mb-4 text-center text-3xl font-bold text-slate-300">
        Our Recommended Plan
      </div>
      <div className="mb-4 text-center text-2xl font-bold text-slate-300">
        (Push, Pull, Legs)
      </div>
      <button
        onClick={handleClick}
        className="rounded-full bg-slate-400 p-5 hover:bg-slate-300 hover:underline"
      >
        Use Recommended
      </button>
    </div>
  );
}

type ExerciseTemplate = {
  description: string;
  sets: SetTemplate[];
};

type SetTemplate = {
  weight: number;
  reps: number;
  rir: number;
};

type WorkoutTemplate = {
  description: string;
  nominalDay: string;
  exercises: ExerciseTemplate[];
};

const emptyWorkoutPlan: WorkoutTemplate[] = [
  {
    description: "",
    nominalDay: "Sunday",
    exercises: [],
  },
  {
    description: "",
    nominalDay: "Monday",
    exercises: [],
  },
  {
    description: "",
    nominalDay: "Tuesday",
    exercises: [],
  },
  {
    description: "",
    nominalDay: "Wednesday",
    exercises: [],
  },
  {
    description: "",
    nominalDay: "Thursday",
    exercises: [],
  },
  {
    description: "",
    nominalDay: "Friday",
    exercises: [],
  },
  {
    description: "",
    nominalDay: "Saturday",
    exercises: [],
  },
];
const PushFirst = {
  description: "Push #1",
  nominalDay: "Monday",
  exercises: [
    { description: "Atlantis Side Raise", weight: 90, sets: 4 },
    { description: "Calf Raise", weight: 220, sets: 4 },
    { description: "Machine Press", weight: 185, sets: 3 },
    { description: "Incline DB Press", weight: 60, sets: 2 },
    { description: "Cable Pushdown", weight: 120, sets: 4 },
  ],
};
const PushSecond = {
  description: "Push #2",
  nominalDay: "Thursday",
  exercises: [
    { description: "Machine Press", weight: 185, sets: 3 },
    { description: "Incline DB Press", weight: 60, sets: 2 },
    { description: "Cable Upright Row", weight: 70, sets: 4 },
    { description: "Cable Pushdown", weight: 120, sets: 4 },
    { description: "Leg Raise", weight: 0, sets: 4 },
  ],
};
const LegFirst = {
  description: "Legs #1",
  nominalDay: "Tuesday",
  exercises: [
    { description: "DB RDL", weight: 100, sets: 2 },
    { description: "Belt Squat", weight: 135, sets: 4 },
    { description: "Candlesticks", weight: 0, sets: 4 },
  ],
};
const LegSecond = {
  description: "Legs #2",
  nominalDay: "Friday",
  exercises: [
    { description: "Belt Squat", weight: 135, sets: 4 },
    { description: "Ham Curl", weight: 100, sets: 4 },
    { description: "Calf Raise", weight: 220, sets: 4 },
  ],
};
const PullFirst = {
  description: "Pull #1",
  nominalDay: "Wednesday",
  exercises: [
    { description: "Calf Raise", weight: 220, sets: 4 },
    { description: "Lat Pulldown", weight: 140, sets: 4 },
    { description: "Machine Row", weight: 185, sets: 4 },
    { description: "Bicep Curl", weight: 40, sets: 4 },
  ],
};
const PullSecond = {
  description: "Pull #2",
  nominalDay: "Saturday",
  exercises: [
    { description: "Machine Row", weight: 185, sets: 4 },
    { description: "Lat Pulldown", weight: 140, sets: 4 },
    { description: "Atlantis Side Raise", weight: 90, sets: 4 },
    { description: "Bicep Curl", weight: 40, sets: 4 },
    { description: "Candlesticks", weight: 0, sets: 4 },
  ],
};
const pplPlanArray = [
  PushFirst,
  PushSecond,
  LegFirst,
  LegSecond,
  PullFirst,
  PullSecond,
];
const emptySet = { rir: 3, reps: 5, weight: 0 };
const PushFirstTwo = {
  description: "Push #1",
  nominalDay: "Monday",
  exercises: [
    {
      description: "Atlantis Side Raise",
      weight: 90,
      sets: Array(3).fill(emptySet),
    },
    { description: "Calf Raise", weight: 220, sets: Array(3).fill(emptySet) },
    {
      description: "Machine Press",
      weight: 185,
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Incline DB Press",
      weight: 60,
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Cable Pushdown",
      weight: 120,
      sets: Array(3).fill(emptySet),
    },
  ],
};
const PushSecondTwo = {
  description: "Push #2",
  nominalDay: "Thursday",
  exercises: [
    {
      description: "Machine Press",
      weight: 185,
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Incline DB Press",
      weight: 60,
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Cable Upright Row",
      weight: 70,
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Cable Pushdown",
      weight: 120,
      sets: Array(3).fill(emptySet),
    },
    { description: "Leg Raise", weight: 0, sets: Array(3).fill(emptySet) },
  ],
};
const LegFirstTwo = {
  description: "Legs #1",
  nominalDay: "Tuesday",
  exercises: [
    { description: "DB RDL", weight: 100, sets: Array(3).fill(emptySet) },
    { description: "Belt Squat", weight: 135, sets: Array(3).fill(emptySet) },
    { description: "Candlesticks", weight: 0, sets: Array(3).fill(emptySet) },
  ],
};

const LegSecondTwo = {
  description: "Legs #2",
  nominalDay: "Friday",
  exercises: [
    { description: "Belt Squat", weight: 135, sets: Array(3).fill(emptySet) },
    { description: "Ham Curl", weight: 100, sets: Array(3).fill(emptySet) },
    { description: "Calf Raise", weight: 220, sets: Array(3).fill(emptySet) },
  ],
};

const PullFirstTwo = {
  description: "Pull #1",
  nominalDay: "Wednesday",
  exercises: [
    { description: "Calf Raise", weight: 220, sets: Array(3).fill(emptySet) },
    { description: "Lat Pulldown", weight: 140, sets: Array(3).fill(emptySet) },
    { description: "Machine Row", weight: 185, sets: Array(3).fill(emptySet) },
    { description: "Bicep Curl", weight: 40, sets: Array(3).fill(emptySet) },
  ],
};

const PullSecondTwo = {
  description: "Push #2",
  nominalDay: "Saturday",
  exercises: [
    { description: "Machine Row", weight: 185, sets: Array(3).fill(emptySet) },
    { description: "Lat Pulldown", weight: 140, sets: Array(3).fill(emptySet) },
    {
      description: "Atlantis Side Raise",
      weight: 90,
      sets: Array(3).fill(emptySet),
    },
    { description: "Bicep Curl", weight: 40, sets: Array(3).fill(emptySet) },
    { description: "Candlesticks", weight: 0, sets: Array(3).fill(emptySet) },
  ],
};

const pplPlanArrayTwo = [
  PushFirstTwo,
  PushSecondTwo,
  LegFirstTwo,
  LegSecondTwo,
  PullFirstTwo,
  PullSecondTwo,
];

function TestButton() {
  const { mutate: makePlan, isLoading } =
    api.getWorkouts.newTestPlanTwo.useMutation({
      onSuccess(data, variables, context) {
        console.log(data);
        window.location.reload();
      },
    });

  function handleClick() {
    makePlan({ workouts: pplPlanArrayTwo });
  }
  return (
    <div>
      <button
        className="rounded-full bg-slate-400 p-5 hover:bg-slate-300 hover:underline"
        onClick={handleClick}
      >
        Use Recommended Plan
      </button>
    </div>
  );
}

interface display3Props {
  workoutPlan: WorkoutTemplate[] | undefined;
}
function WorkoutDisplay3({ workoutPlan }: display3Props) {
  function sortWorkoutsByNominalDay(workouts: ActualWorkout[]) {
    const daysOfWeek = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];

    workouts.sort((a, b) => {
      const dayA = daysOfWeek.indexOf(a.nominalDay);
      const dayB = daysOfWeek.indexOf(b.nominalDay);
      return dayA - dayB;
    });

    return workouts;
  }

  return (
    <div>
      <div className="mb-4 text-center text-2xl font-bold text-slate-300">
        Current Workouts:
      </div>
      {workoutPlan &&
        workoutPlan?.map(
          (workout: WorkoutTemplate & { exercises?: ExerciseTemplate[] }) => (
            <div key={workout.description}>
              <div>{workout.description}</div>
              <div>{workout.nominalDay}</div>
              <div>
                {workout.exercises &&
                  workout.exercises.map(
                    (exercise: ExerciseTemplate & { sets: SetTemplate[] }) =>
                      exercise.sets &&
                      exercise.sets.length > 0 && (
                        <div key={exercise.description}>
                          {exercise.description}: {exercise.sets[0]?.weight} lbs
                          x {exercise.sets.length}
                        </div>
                      )
                  )}
              </div>
              <br></br>
            </div>
          )
        )}
    </div>
  );
}

function WorkoutDisplay() {
  const [workoutSchedule, setWorkoutSchedule] = useState<ActualWorkout[]>();
  const { data: workoutPlan, isLoading } =
    api.getWorkouts.getPlanByUserId.useQuery();

  function sortWorkoutsByNominalDay(workouts: ActualWorkout[]) {
    const daysOfWeek = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];

    workouts.sort((a, b) => {
      const dayA = daysOfWeek.indexOf(a.nominalDay);
      const dayB = daysOfWeek.indexOf(b.nominalDay);
      return dayA - dayB;
    });

    return workouts;
  }

  if (workoutPlan && workoutPlan[0] && !workoutSchedule && !isLoading) {
    const workouts = sortWorkoutsByNominalDay(workoutPlan[0].workouts);
    setWorkoutSchedule(workouts);
    console.log("workouts: ");
    console.log(workouts);
  }
  if (isLoading) {
    return <div>Loading</div>;
  }
  if (!workoutPlan) {
    return <div>No Workouts</div>;
  }

  return (
    <div>
      <div className="mb-4 text-center text-2xl font-bold text-slate-300">
        Current Workouts:{" "}
      </div>
      {workoutSchedule?.map(
        (workout: ActualWorkout & { exercises?: ActualExercise[] }) => (
          <div key={workout.workoutId}>
            <div>{workout.description}</div>
            <div>{workout.nominalDay}</div>
            <div>
              {workout.exercises &&
                workout.exercises.map(
                  (exercise: ActualExercise & { sets?: exerciseSet[] }) =>
                    exercise.sets &&
                    exercise.sets.length > 0 && (
                      <div key={exercise.exerciseId}>
                        {exercise.description}: {exercise.sets[0]?.weight} lbs x{" "}
                        {exercise.sets.length}
                      </div>
                    )
                )}
            </div>
            <br></br>
          </div>
        )
      )}
    </div>
  );
}
