import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import React, {
  useState,
  useTransition,
  useRef,
  useEffect,
  HtmlHTMLAttributes,
} from "react";
import {
  ClerkProvider,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  useUser,
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton,
} from "@clerk/nextjs";
import { userAgent } from "next/server";
import { userInfo } from "os";
import { boolean } from "zod";
import type {
  User,
  Workout,
  WorkoutPlan,
  ActualWorkout,
  ActualExercise,
  exerciseSet,
  WorkoutPlanTwo,
} from "@prisma/client";
import { prisma } from "~/server/db";
import { empty } from "@prisma/client/runtime";
import { SourceTextModule } from "vm";
import { v4 } from "uuid";
import { existsSync } from "fs";
import { create } from "domain";
import { useRouter } from "next/router";
import { describe } from "node:test";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-gradient-to-b   from-[#000000]  to-[#44454b] text-center text-white">
        <nav className="bg-black-500 flex flex-wrap">
          <SignedIn>
            <div className="flex flex-col p-4 text-white ">
              <UserButton
                appearance={{
                  elements: { userButtonAvatarBox: { width: 60, height: 60 } },
                }}
              />
            </div>
          </SignedIn>
          <div className="flex items-center justify-between">
            <Link
              href="home"
              className=" m-2 text-slate-200 hover:text-white hover:underline"
            >
              Home
            </Link>
            <Link
              href="makeplan"
              className="m-2 text-slate-200 hover:text-white"
            >
              Edit Plan
            </Link>
            <Link
              href="allworkouts"
              className="m-2 text-slate-200 hover:text-white"
            >
              History
            </Link>
          </div>
        </nav>
        <div>
          <SignedIn>
            <br></br>
            <NewWorkoutUi />
            <br></br>
            <div></div>
          </SignedIn>
          <SignedOut>
            {/* Signed out users get sign in button */}
            <SignInButton redirectUrl="home">
              <button className="rounded-full bg-white p-3 text-xl text-black">
                Sign In
              </button>
            </SignInButton>
          </SignedOut>
        </div>
      </main>
    </>
  );
};

export default Home;

function NewWorkoutUi() {
  return (
    <div>
      <TestButton></TestButton>
      <br></br>
      <div>or make your own</div>
      <br></br>
      <WorkoutPlanForm />
      <br></br>
      {
        //<WorkoutDisplay />
      }
    </div>
  );
}

function WorkoutPlanForm() {
  const [workoutPlan, setWorkoutPlan] = useState<WorkoutTemplate[] | undefined>(
    undefined
  );
  function sortWorkoutsByNominalDay(workouts: WorkoutTemplate[]) {
    const daysOfWeek = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];
    const sortedWorkouts = [...workouts];

    sortedWorkouts.sort((a, b) => {
      const dayA = daysOfWeek.indexOf(a.nominalDay);
      const dayB = daysOfWeek.indexOf(b.nominalDay);
      return dayA - dayB;
    });

    return sortedWorkouts;
  }

  if (!workoutPlan) {
    setWorkoutPlan(sortWorkoutsByNominalDay(pplPlanArrayTwo));
  }
  function addWorkout(workout: WorkoutTemplate) {
    console.log(workout);
    const newWorkoutPlan = workoutPlan ? [...workoutPlan, workout] : [workout];
    setWorkoutPlan(newWorkoutPlan);
  }

  return (
    <div className="flex items-center justify-center">
      <div className="max-w-fit bg-black p-5">
        <WorkoutDisplay3
          workoutPlan={workoutPlan}
          setWorkoutPlan={setWorkoutPlan}
        />
        <WorkoutDayForm addWorkout={addWorkout} />
      </div>
    </div>
  );
}

interface WorkoutDayFormProps {
  addWorkout: (workout: WorkoutTemplate) => void;
}

function WorkoutDayForm({ addWorkout }: WorkoutDayFormProps) {
  const [dayDescription, setDayDescription] = useState("");
  const [nominalDay, setNominalDay] = useState("");
  const [showAddExercises, setShowAddExercises] = useState(false);
  const [workoutDayPlan, setWorkoutDayPlan] = useState<
    WorkoutTemplate | undefined
  >(undefined);

  function handleAddExercises() {
    console.log(dayDescription, nominalDay);
    if (dayDescription && nominalDay) {
      setShowAddExercises(true);
    }
  }
  function updateWorkoutPlan(exercises: ExerciseTemplate[]) {
    if (dayDescription && nominalDay) {
      const newWorkoutPlan: WorkoutTemplate = {
        workoutId: createUniqueId(),
        description: dayDescription,
        nominalDay: nominalDay,
        exercises: exercises,
      };
      setWorkoutDayPlan(newWorkoutPlan);
      console.log(newWorkoutPlan);
      addWorkout(newWorkoutPlan);
      setShowAddExercises(false);
      setDayDescription("");
      setNominalDay("");
    }
  }
  const inputRef = useRef<HTMLInputElement | null>(null);

  //useEffect(() => {
  //inputRef.current?.focus();
  //}, []);

  return (
    <div className="flex items-center justify-center">
      {!showAddExercises && (
        <form onSubmit={handleAddExercises}>
          <div className="max-w-fit bg-black p-5">
            <label>Day Description:</label>
            <input
              required
              ref={inputRef}
              value={dayDescription}
              onChange={(event) => setDayDescription(event.target.value)}
              className="rounded-md p-1 text-black"
              type="text"
            ></input>
            <br></br>
            <br></br>
            <div>
              <label>Nominal Day: </label>
              <select
                value={nominalDay}
                onChange={(event) => setNominalDay(event.target.value)}
                required
                className="rounded-md bg-white p-1 text-black"
              >
                <option value="">Select Day</option>
                <option value="Monday">Monday</option>
                <option value="Tuesday">Tuesday</option>
                <option value="Wednesday">Wednesday</option>
                <option value="Thursday">Thursday</option>
                <option value="Friday">Friday</option>
                <option value="Saturday">Saturday</option>
                <option value="Sunday">Sunday</option>
              </select>
            </div>
            <br></br>
            <button
              type="submit"
              className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
            >
              Add Exercsies
            </button>
            <br></br>
          </div>
        </form>
      )}
      <br></br>
      {showAddExercises && <AddExerciseForm updatePlan={updateWorkoutPlan} />}
      <br></br>
    </div>
  );
}

interface AddExerciseFormProps {
  updatePlan: (exercise: ExerciseTemplate[]) => void;
}

function AddExerciseForm({ updatePlan }: AddExerciseFormProps) {
  const [exercises, setExercises] = useState<ExerciseTemplate[]>();

  function saveExercises() {
    if (exercises) {
      updatePlan(exercises);
      setExercises([]);
    }
  }
  return (
    <div>
      <div>
        {exercises?.map((exercise, index) => (
          <div key={index}>
            {exercise.description}: {exercise?.sets[0]?.weight} x{" "}
            {exercise.sets.length}
          </div>
        ))}
      </div>
      <div>
        <NewExercise setExercises={setExercises} exercises={exercises} />
      </div>
      <button
        onClick={saveExercises}
        className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
      >
        Save Day
      </button>
    </div>
  );
}

interface NewExerciseProps {
  exercises: ExerciseTemplate[] | undefined;
  setExercises: React.Dispatch<
    React.SetStateAction<ExerciseTemplate[] | undefined>
  >;
}

function NewExercise({ exercises, setExercises }: NewExerciseProps) {
  const [description, setDescription] = useState("");
  const [weight, setWeight] = useState(0);
  const [reps, setReps] = useState(5);
  const [sets, setSets] = useState(1);
  const inputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (sets) {
      const newExercise: ExerciseTemplate = {
        id: createUniqueId(),
        description: description,
        sets: Array(sets).fill({
          ...emptySet,
          weight: weight,
          reps: reps,
        }) as SetTemplate[],
      };
      if (exercises) {
        const newExercises: ExerciseTemplate[] = [...exercises, newExercise];
        setExercises(newExercises);
        console.log(newExercises);
      } else {
        setExercises([newExercise]);
        console.log(newExercise);
      }
    }
    inputRef.current?.focus();
    setDescription("");
    setWeight(0);
    setSets(1);
  };
  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setDescription(event.target.value);
  };
  const handleRepsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setReps(parseInt(event.target.value));
  };
  const handleWeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWeight(parseInt(event.target.value));
  };
  const handleSetsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSets(parseInt(event.target.value));
  };

  return (
    <div className="flex flex-row justify-center ">
      <form onSubmit={handleSubmit} className="items-center justify-center">
        <div className="mb-4 w-full p-1  sm:w-auto">
          <label htmlFor="description" className="mr-2">
            Exercise:
          </label>
          <div className="flex items-center">
            <input
              id="description"
              type="text"
              ref={inputRef}
              required
              className="rounded-md  p-1 text-black sm:w-48"
              value={description}
              onChange={handleDescriptionChange}
            />
          </div>
        </div>
        <div className="flex w-full flex-row">
          <div className="mb-4 w-full sm:w-auto">
            <label htmlFor="weight" className="mr-2">
              Weight:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-14 rounded-md p-1 text-center text-black"
                value={weight}
                onChange={handleWeightChange}
              />
            </div>
          </div>
          <div className="mb-4 w-full sm:w-auto ">
            <label htmlFor="weight" className="mr-2">
              Reps:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-12 rounded-md p-1 text-center text-black"
                value={reps}
                onChange={handleRepsChange}
              />
            </div>
          </div>

          <div className="mb-4 w-full sm:w-auto ">
            <label htmlFor="sets" className="mr-2">
              Sets:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="sets"
                type="number"
                min="1"
                required
                className="w-12 rounded-md p-1 text-center text-black"
                value={sets}
                onChange={handleSetsChange}
              />
            </div>
          </div>
        </div>

        <div className="ml-auto">
          <button
            type="submit"
            className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
          >
            Add Exercise
          </button>
        </div>
      </form>
    </div>
  );
}

interface NewDayProps {
  day: string;
  updatePlan: (newDay: WorkoutTemplate) => void;
}

function NewDay({ day, updatePlan }: NewDayProps) {
  const [exercises, setExercises] = useState<ExerciseTemplate[]>();
  const [description, setDescription] = useState("");
  const [submittedDescription, setSubmittedDescription] = useState("");
  const [descriptionset, setdescriptionset] = useState(false);
  const [daySaved, setDaySaved] = useState(false);

  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setDescription(event.target.value);
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setSubmittedDescription(description);
    setdescriptionset(true);
  };
  //need to have a running day plan and populate with exercises as they add
  const handleSetDay = () => {
    if (description && exercises) {
      const dayWorkout: WorkoutTemplate = {
        workoutId: createUniqueId(),
        description: description,
        nominalDay: day,
        exercises: exercises,
      };
      console.log("newday comp");
      console.log(dayWorkout);
      setDescription("");
      updatePlan(dayWorkout);
      setDaySaved(true);
    }
  };

  return (
    <div className="mx-auto max-w-md">
      <div className="w-full sm:w-1/4">{day}</div>
      <div>
        {!submittedDescription && (
          <form onSubmit={handleSubmit} className="mb-4">
            <div className="flex flex-wrap">
              <div className="mb-2 flex items-center sm:mb-0 sm:w-1/4">
                <label className="mr-2">Description:</label>
                <input
                  type="text"
                  className="w-full max-w-xs rounded-md border border-gray-300 px-4 py-2 text-black"
                  value={description}
                  onChange={handleDescriptionChange}
                />
              </div>
            </div>
            <div className="flex w-full justify-end sm:w-3/4">
              <button
                type="submit"
                className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
              >
                Enter
              </button>
            </div>
          </form>
        )}
        {submittedDescription && (
          <div className="mb-4">{submittedDescription}</div>
        )}
      </div>

      {exercises && (
        <div className="mb-4 flex flex-col">
          <table className="min-w-full divide-y">
            <thead>
              <tr>
                <th className="py-2">Description</th>
                <th className="py-2">Weight</th>
                <th className="py-2">Sets</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {exercises.map((exercise) => (
                <tr key={exercise.description}>
                  <td className="py-2">{exercise.description}</td>
                  <td className="py-2">{exercise.sets.length}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {!daySaved && descriptionset && (
        <NewExercise exercises={exercises} setExercises={setExercises} />
      )}

      {!daySaved && descriptionset && (
        <button
          onClick={handleSetDay}
          className="m-2 rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
        >
          Save Day
        </button>
      )}
    </div>
  );
}

function MakePplSplit() {
  const { mutate: makePlan, isLoading } =
    api.getWorkouts.newTestPlan.useMutation({
      onSuccess(data, variables, context) {
        console.log(data);
        window.location.reload();
      },
    });

  function handleClick() {
    makePlan({ workouts: pplPlanArray });
  }
  return (
    <div>
      <div className="mb-4 text-center text-3xl font-bold text-slate-300">
        Our Recommended Plan
      </div>
      <div className="mb-4 text-center text-2xl font-bold text-slate-300">
        (Push, Pull, Legs)
      </div>
      <button
        onClick={handleClick}
        className="rounded-full bg-slate-400 p-5 hover:bg-slate-300 hover:underline"
      >
        Use Recommended
      </button>
    </div>
  );
}

function createUniqueId(): string {
  return v4();
}

type ExerciseTemplate = {
  id: string;
  description: string;
  sets: SetTemplate[];
};

type SetTemplate = {
  weight: number;
  reps: number;
  rir: number;
};

type WorkoutTemplate = {
  description: string;
  nominalDay: string;
  workoutId: string;
  exercises: ExerciseTemplate[];
};

const emptyWorkoutPlan: WorkoutTemplate[] = [
  {
    workoutId: createUniqueId(),
    description: "",
    nominalDay: "Sunday",
    exercises: [],
  },
  {
    workoutId: createUniqueId(),
    description: "",
    nominalDay: "Monday",
    exercises: [],
  },
  {
    workoutId: createUniqueId(),
    description: "",
    nominalDay: "Tuesday",
    exercises: [],
  },
  {
    workoutId: createUniqueId(),
    description: "",
    nominalDay: "Wednesday",
    exercises: [],
  },
  {
    workoutId: createUniqueId(),
    description: "",
    nominalDay: "Thursday",
    exercises: [],
  },
  {
    workoutId: createUniqueId(),
    description: "",
    nominalDay: "Friday",
    exercises: [],
  },
  {
    workoutId: createUniqueId(),
    description: "",
    nominalDay: "Saturday",
    exercises: [],
  },
];
const PushFirst = {
  description: "Push #1",
  nominalDay: "Monday",
  workoutId: createUniqueId(),
  exercises: [
    { description: "Atlantis Side Raise", weight: 90, sets: 4 },
    { description: "Calf Raise", weight: 220, sets: 4 },
    { description: "Machine Press", weight: 185, sets: 3 },
    { description: "Incline DB Press", weight: 60, sets: 2 },
    { description: "Cable Pushdown", weight: 120, sets: 4 },
  ],
};
const PushSecond = {
  description: "Push #2",
  workoutId: createUniqueId(),
  nominalDay: "Thursday",
  exercises: [
    { description: "Machine Press", weight: 185, sets: 3 },
    { description: "Incline DB Press", weight: 60, sets: 2 },
    { description: "Cable Upright Row", weight: 70, sets: 4 },
    { description: "Cable Pushdown", weight: 120, sets: 4 },
    { description: "Leg Raise", weight: 0, sets: 4 },
  ],
};
const LegFirst = {
  description: "Legs #1",
  nominalDay: "Tuesday",
  workoutId: createUniqueId(),
  exercises: [
    { description: "DB RDL", weight: 100, sets: 2 },
    { description: "Belt Squat", weight: 135, sets: 4 },
    { description: "Candlesticks", weight: 0, sets: 4 },
  ],
};
const LegSecond = {
  description: "Legs #2",
  workoutId: createUniqueId(),
  nominalDay: "Friday",
  exercises: [
    { description: "Belt Squat", weight: 135, sets: 4 },
    { description: "Ham Curl", weight: 100, sets: 4 },
    { description: "Calf Raise", weight: 220, sets: 4 },
  ],
};
const PullFirst = {
  description: "Pull #1",
  workoutId: createUniqueId(),
  nominalDay: "Wednesday",
  exercises: [
    { description: "Calf Raise", weight: 220, sets: 4 },
    { description: "Lat Pulldown", weight: 140, sets: 4 },
    { description: "Machine Row", weight: 185, sets: 4 },
    { description: "Bicep Curl", weight: 40, sets: 4 },
  ],
};
const PullSecond = {
  description: "Pull #2",
  nominalDay: "Saturday",
  workoutId: createUniqueId(),
  exercises: [
    { description: "Machine Row", weight: 185, sets: 4 },
    { description: "Lat Pulldown", weight: 140, sets: 4 },
    { description: "Atlantis Side Raise", weight: 90, sets: 4 },
    { description: "Bicep Curl", weight: 40, sets: 4 },
    { description: "Candlesticks", weight: 0, sets: 4 },
  ],
};
const pplPlanArray = [
  PushFirst,
  PushSecond,
  LegFirst,
  LegSecond,
  PullFirst,
  PullSecond,
];
const emptySet = { rir: 3, reps: 5, weight: 0 };
const PushFirstTwo = {
  description: "Push #1",
  nominalDay: "Monday",
  workoutId: createUniqueId(),
  exercises: [
    {
      id: createUniqueId(),
      description: "Atlantis Side Raise",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Calf Raise",
      weight: 220,
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Machine Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Incline DB Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Cable Pushdown",
      sets: Array(3).fill(emptySet),
    },
  ],
};
const PushSecondTwo = {
  description: "Push #2",
  workoutId: createUniqueId(),
  nominalDay: "Thursday",
  exercises: [
    {
      id: createUniqueId(),
      description: "Machine Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Incline DB Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Cable Upright Row",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Cable Pushdown",
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Leg Raise",
      id: createUniqueId(),
      weight: 0,
      sets: Array(3).fill(emptySet),
    },
  ],
};
const LegFirstTwo = {
  description: "Legs #1",
  workoutId: createUniqueId(),
  nominalDay: "Tuesday",
  exercises: [
    {
      id: createUniqueId(),
      description: "DB RDL",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Belt Squat",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Candlesticks",
      sets: Array(3).fill(emptySet),
    },
  ],
};

const LegSecondTwo = {
  description: "Legs #2",
  nominalDay: "Friday",
  workoutId: createUniqueId(),
  exercises: [
    {
      description: "Belt Squat",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Ham Curl",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Calf Raise",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
  ],
};

const PullFirstTwo = {
  description: "Pull #1",
  nominalDay: "Wednesday",
  workoutId: createUniqueId(),
  exercises: [
    {
      description: "Calf Raise",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Lat Pulldown",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Machine Row",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Bicep Curl",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
  ],
};

const PullSecondTwo = {
  description: "Push #2",
  nominalDay: "Saturday",
  workoutId: createUniqueId(),
  exercises: [
    {
      description: "Machine Row",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Lat Pulldown",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Atlantis Side Raise",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Bicep Curl",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Candlesticks",
      sets: Array(3).fill(emptySet),
    },
  ],
};

const pplPlanArrayTwo = [
  PushFirstTwo,
  PushSecondTwo,
  LegFirstTwo,
  LegSecondTwo,
  PullFirstTwo,
  PullSecondTwo,
];

function TestButton() {
  const { mutate: makePlan, isLoading } =
    api.getWorkouts.newTestPlanTwo.useMutation({
      onSuccess(data, variables, context) {
        console.log(data);
        window.location.reload();
      },
    });

  function handleClick() {
    makePlan({ workouts: pplPlanArrayTwo });
  }
  return (
    <div>
      <button
        className="rounded-full bg-slate-400 p-5 hover:bg-slate-300 hover:underline"
        onClick={handleClick}
      >
        Use Recommended Plan
      </button>
    </div>
  );
}

interface display3Props {
  workoutPlan: WorkoutTemplate[] | undefined;
  setWorkoutPlan: React.Dispatch<
    React.SetStateAction<WorkoutTemplate[] | undefined>
  >;
}
function WorkoutDisplay3({ workoutPlan, setWorkoutPlan }: display3Props) {
  function updateWorkoutPlan(
    exercise: ExerciseTemplate & { sets: SetTemplate[] },
    workoutId: string,
    exerciseId: string
  ) {
    console.log(exercise, workoutId, exerciseId);
    if (workoutPlan) {
      //exercise in workout to update
      setWorkoutPlan((prevWorkoutPlan) => {
        const newWorkoutPlan = [...(prevWorkoutPlan ?? [])];
        const workoutIndex = newWorkoutPlan.findIndex(
          (workout) => workout.workoutId === workoutId
        );
        if (workoutIndex !== -1) {
          const workout = newWorkoutPlan[workoutIndex];
          if (workout && newWorkoutPlan[workoutIndex] !== undefined) {
            const exerciseIndex = workout.exercises.findIndex(
              (oldExercise) => oldExercise.id === exerciseId
            );
            if (exerciseIndex !== -1) {
              newWorkoutPlan[workoutIndex]!.exercises[exerciseIndex] = exercise;
            }
          }
        }
        console.log(newWorkoutPlan);
        return newWorkoutPlan;
      });
    }
  }

  function removeExercise(workoutNumber: string, exerciseId: string) {
    setWorkoutPlan((prevWorkoutPlan) => {
      const updateWorkoutPlan = prevWorkoutPlan?.map((workout) => {
        const updatedExercises = workout.exercises.filter(
          (exercise) => exercise.id !== exerciseId
        );
        return { ...workout, exercises: updatedExercises };
      });
      console.log(updateWorkoutPlan);
      return updateWorkoutPlan;
    });
  }

  function addExercise(workoutNumber: string, exerciseIndex: number) {
    console.log("workout", workoutNumber);
    console.log("exercise", exerciseIndex);
    const newExercise: ExerciseTemplate = {
      description: "New Exercise",
      id: createUniqueId(),
      sets: [emptySet],
    };

    setWorkoutPlan((prevWorkoutPlan) => {
      const updatedWorkoutPlan = [...(prevWorkoutPlan ?? [])];
      const workoutIndex = updatedWorkoutPlan.findIndex(
        (workout) => workout.workoutId === workoutNumber
      );
      if (workoutIndex !== -1) {
        const workout = updatedWorkoutPlan[workoutIndex];
        if (workout) {
          const newExercises = [
            ...workout.exercises.slice(0, exerciseIndex + 1),
            newExercise,
            ...workout.exercises.slice(exerciseIndex + 1),
          ];
          updatedWorkoutPlan[workoutIndex] = {
            ...workout,
            exercises: newExercises,
          };
        }
      }
      return updatedWorkoutPlan;
    });
  }

  return (
    <div>
      <div className="mb-4 text-center text-2xl font-bold text-slate-300">
        Current Workouts:
      </div>
      {workoutPlan &&
        workoutPlan.map(
          (
            workout: WorkoutTemplate & { exercises?: ExerciseTemplate[] },
            workoutNumber
          ) => (
            <div key={"w" + workoutNumber.toString()}>
              <div>
                {workout.description}: {workout.nominalDay}
              </div>
              <div>
                {workout.exercises &&
                  workout.exercises.map(
                    (
                      exercise: ExerciseTemplate & { sets: SetTemplate[] },
                      exerciseNumber
                    ) => (
                      <ExerciseDisplay
                        removeExercise={removeExercise}
                        workoutNumber={workout.workoutId}
                        exerciseNumber={exercise.id}
                        exerciseIndex={exerciseNumber}
                        updatePlan={updateWorkoutPlan}
                        addExercise={addExercise}
                        key={
                          workoutNumber.toString() + exerciseNumber.toString()
                        }
                        exercise={exercise}
                      />
                    )
                  )}
              </div>
              <br></br>
            </div>
          )
        )}
    </div>
  );
}
interface ExerciseDisplayProps {
  exercise: ExerciseTemplate & { sets: SetTemplate[] };
  workoutNumber: string;
  exerciseNumber: string;
  exerciseIndex: number;
  addExercise: (workoutNumber: string, exerciseIndex: number) => void;
  updatePlan: (
    exercise: ExerciseTemplate & { sets: SetTemplate[] },
    workoutNumber: string,
    exerciseNumber: string
  ) => void;
  removeExercise: (workoutNumber: string, exerciseNumber: string) => void;
}

function ExerciseDisplay({
  removeExercise,
  exercise,
  workoutNumber,
  exerciseNumber,
  exerciseIndex,
  addExercise,
  updatePlan,
}: ExerciseDisplayProps) {
  const [description, setDescription] = useState(exercise.description);
  const [sets, setSets] = useState(exercise.sets);

  useEffect(() => {
    setDescription(exercise.description);
    setSets(exercise.sets);
  }, [exercise.description, exercise.sets]);

  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const value = event.target.value;
    setDescription(value);
  };

  function handleSetChange(set: SetTemplate, index: number) {
    const newSets = [...sets];
    newSets[index] = set;
    setSets(newSets);
    console.log(newSets);
  }
  function handleSaveButton() {
    const newData: ExerciseTemplate & { sets: SetTemplate[] } = {
      description: description,
      sets: sets,
      id: exercise.id,
    };
    console.log(newData);
    updatePlan(newData, workoutNumber, exerciseNumber);
  }
  function handleAddSet() {
    const newSet = emptySet;
    const lastSet = sets[sets.length - 1];
    if (lastSet !== undefined) {
      newSet.reps = lastSet.reps;
      newSet.rir = lastSet.rir;
      newSet.weight = lastSet.weight;
    }
    const newSets = [...sets, newSet];
    setSets(newSets);
  }
  function handleAddExercise() {
    addExercise(workoutNumber, exerciseIndex);
  }
  function handleRemoveExercise() {
    removeExercise(workoutNumber, exercise.id);
  }
  function handleRemoveSet(index: number) {
    console.log("remove set");
    const newSets = [...sets];
    if (index >= 0 && index < newSets.length) {
      newSets.splice(index, 1);
    }
    console.log(newSets);
    setSets(newSets);
  }
  const [descriptionInputActive, setDescriptionInputActive] = useState(false);
  const handleBlur = () => {
    if (description.length > 0) {
      setDescriptionInputActive(false);
      console.log(description);
    }
  };
  const handleDescriptionClick = () => {
    setDescriptionInputActive(true);
  };
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      handleBlur();
    }
  };

  return (
    <div key={exercise.description} className="m-1 bg-red-700">
      <div>
        {descriptionInputActive ? (
          <input
            type="text"
            value={description}
            onChange={handleDescriptionChange}
            onKeyDown={handleKeyDown}
            onBlur={handleBlur}
            className="rounded-md px-1 text-black"
            autoFocus
          />
        ) : (
          <span onClick={handleDescriptionClick}>{description}</span>
        )}
        <button
          onClick={handleRemoveExercise}
          className="m-1 rounded bg-blue-500 px-2 py-1 font-bold text-white hover:bg-blue-700"
        >
          --
        </button>
      </div>
      <div>
        {sets.map((set, index) => (
          <SetDisplay
            key={index}
            set={set}
            index={index}
            removeSet={handleRemoveSet}
            updateSets={handleSetChange}
          />
        ))}
      </div>
      <button
        onClick={handleAddSet}
        className="m-1 rounded bg-blue-500 px-1 py-1 font-bold text-white hover:bg-blue-700"
      >
        Add Set
      </button>
      <button
        onClick={handleSaveButton}
        className=" m-1 rounded bg-blue-500 px-2 py-1 font-bold text-white hover:bg-blue-700"
      >
        Save
      </button>
      <div>
        <button
          onClick={handleAddExercise}
          className=" m-1 rounded bg-blue-500 px-1 py-1 font-bold text-white hover:bg-blue-700"
        >
          Add Exercise
        </button>
      </div>
    </div>
  );
}

interface SetDisplayProps {
  index: number;
  set: SetTemplate;
  updateSets: (set: SetTemplate, index: number) => void;
  removeSet: (index: number) => void;
}

function SetDisplay({ index, set, updateSets, removeSet }: SetDisplayProps) {
  const [weight, setWeight] = useState(set.weight);
  const [reps, setReps] = useState(set.reps);
  const [rir, setRir] = useState(set.rir);

  const handleWeightClick = () => {
    setWeightInputActive(true);
  };
  const handleRepsClick = () => {
    setRepsInputActive(true);
  };
  const handleRirClick = () => {
    setRirInputActive(true);
  };
  const handleBlur = () => {
    setWeightInputActive(false);
    setRepsInputActive(false);
    setRirInputActive(false);
    const newSet: SetTemplate = {
      weight: weight,
      reps: reps,
      rir: rir,
    };
    updateSets(newSet, index);
  };

  useEffect(() => {
    setWeight(set.weight);
    setReps(set.reps);
    setRir(set.rir);
  }, [set.weight, set.reps, set.rir]);

  const handleWeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value);
    if (!isNaN(value) && value >= 0) {
      setWeight(parseInt(event.target.value));
    }
  };

  const handleRepsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value);
    if (!isNaN(value) && value >= 0) {
      setReps(parseInt(event.target.value));
    }
  };

  const handleRirChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value);
    if (!isNaN(value) && value >= 0) {
      setRir(parseInt(event.target.value));
    }
  };

  function handleRemoveSet() {
    removeSet(index);
  }
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      handleBlur();
    }
  };

  const [weightInputActive, setWeightInputActive] = useState(false);
  const [repsInputActive, setRepsInputActive] = useState(false);
  const [rirInputActive, setRirInputActive] = useState(false);

  return (
    <div className="m-1">
      {weightInputActive ? (
        <input
          type="number"
          value={weight}
          onChange={handleWeightChange}
          onBlur={handleBlur}
          onKeyDown={handleKeyDown}
          className="w-12 rounded-md text-center text-black"
          autoFocus
        />
      ) : (
        <span className="underline" onClick={handleWeightClick}>
          {weight} lbs
        </span>
      )}{" "}
      x{" "}
      {repsInputActive ? (
        <input
          type="number"
          value={reps}
          onKeyDown={handleKeyDown}
          onChange={handleRepsChange}
          onBlur={handleBlur}
          className="w-12 rounded-md text-center text-black"
          autoFocus
        />
      ) : (
        <span className="underline" onClick={handleRepsClick}>
          {reps} reps
        </span>
      )}{" "}
      @{" "}
      {rirInputActive ? (
        <input
          type="number"
          value={rir}
          onChange={handleRirChange}
          onBlur={handleBlur}
          onKeyDown={handleKeyDown}
          className="w-12 rounded-md text-center text-black"
          autoFocus
        />
      ) : (
        <span className="underline" onClick={handleRirClick}>
          {rir} RIR
        </span>
      )}
      <button
        onClick={handleRemoveSet}
        className="mx-1 rounded bg-blue-500 px-2 py-1 font-bold text-white hover:bg-blue-700"
      >
        --
      </button>
    </div>
  );
}
