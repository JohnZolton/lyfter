import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import React, { FormEvent, useState, useTransition, useRef, useEffect } from 'react'
import {
  ClerkProvider,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  useUser,
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton
} from "@clerk/nextjs";
import { userAgent } from "next/server";
import { userInfo } from "os";
import { boolean, set } from "zod";
import { ActualWorkout, ActualExercise, User, Workout, Exercise, TestExercise, TestWorkout, ModelWorkout, ModelExercise, exerciseSet, ModelWorkoutPlan} from "@prisma/client"
import { prisma } from "~/server/db";
import { start } from "repl";


const Home: NextPage = () => {

  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="text-white text-center flex min-h-screen   flex-col  bg-gradient-to-b from-[#000000] to-[#44454b]">
<nav className="flex items-center justify-between flex-wrap bg-black-500 p-6">
        <SignedIn>

            <div className="text-white   items-end flex p-6 items-right flex-col ">
                <UserButton appearance={{ 
                  elements: { 
                    userButtonAvatarBox: { width: 60, height: 60 } 
                    }
                  }} />
            </div>
        </SignedIn>
  <div className="flex items-center flex-shrink-0 text-white mr-6">
  </div>
  <div className="w-full block flex-grow lg:flex lg:items-center lg:w-auto">
    <div className="text-sm lg:flex-grow">
      <Link href="home" className="block mt-4 lg:inline-block lg:mt-0 text-slate-200 hover:text-white mr-4">Home</Link>
      <Link href="makeplan" className="block mt-4 lg:inline-block lg:mt-0 text-slate-200 hover:text-white mr-4">Edit Workout Plan</Link>
      < Link href="allworkouts" className="block mt-4 lg:inline-block lg:mt-0 text-slate-200 hover:text-white mr-4">Workout History</Link>
    </div>
    <div>
    </div>
  </div>
</nav>
        <div>
          <br></br>
          <WorkoutUi />
          <br></br>
      <div>
      </div>
        <SignedOut>
          {/* Signed out users get sign in button */}
          <SignInButton redirectUrl="home">
            <button className="rounded-full text-xl text-black bg-white p-3">Sign In</button>
            </SignInButton>
        </SignedOut>
      </div>
      </main>
    </>
  );
};

export default Home

function WorkoutUi(){
    const [newWorkout, setNewWorkout] = useState<Workout>()
    const [exercises, setExercises] = useState<Exercise[]>([])
    const [inProgress, setInProgress] = useState(false)
    const [selectExercise, setSelectedExercise] = useState<Exercise | undefined>(undefined)
    const [workoutHistory, setWorkoutHistory] = useState<(ActualWorkout & {
    exercises: (ActualExercise & {
        sets: exerciseSet[];
    })[];
})[] | undefined>(undefined)

    const today = new Date()
    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const todayName = weekdays[today.getDay()];
    
    const {data: workoutPlan, isLoading} = api.getWorkouts.getWorkoutPlan.useQuery()
    if (todayName){
      const {data: priorWorkouts, isLoading: workoutsLoading } = api.getWorkouts.getPreviousWorkout.useQuery({
        nominalDay: todayName
        }) 
      if (!workoutsLoading && workoutHistory===undefined){
        if (priorWorkouts && priorWorkouts[0]){
          setWorkoutHistory(priorWorkouts)
        }
      } 
      }


    
    return(
      <div>
        <h3 className="text-xl font-bold">Todays Workout</h3>
        <br></br>
        {!inProgress && <CurrentWorkout plan={workoutPlan} workout={workoutHistory}/>}
      </div>
    )

}

interface CurrentWorkoutProps{
  workout: (ActualWorkout & {
    exercises: (ActualExercise & {
        sets: exerciseSet[];
    })[];
})[] | undefined;
  plan: (ModelWorkoutPlan & {
    workouts: (ModelWorkout & {
        exercises: ModelExercise[];
    })[];
})[] | undefined}

interface WorkoutWithExercise {
  workoutId: string;
  date: Date;
  nominalDay: string;
  userId: string;
  description: string;
  exercises: ModelExercise[];
}

interface WorkoutActual {
  nominalDay: string | undefined;
  description: string | undefined;
  exercises: ExerciseActual[];
}
interface ExerciseActual {
  description: string | undefined;
  sets: resultOfSet[];
}

function LoadingSpinner(){
  return(

        <div
            className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-primary motion-reduce:animate-[spin_1.5s_linear_infinite]"
            role="status">
            <span
                className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]"
                >Loading...</span
            >
        </div>
  )
}

function CurrentWorkout({workout, plan}: CurrentWorkoutProps){
  const [todaysWorkout, setTodaysWorkout] = useState<WorkoutWithExercise>()
  const [workoutStarted, setWorkoutStarted] = useState(false)
  const [currentExercise, setCurrentExercise] = useState<ModelExercise | undefined >()
  const [workoutActual, setWorkoutActual] = useState<WorkoutActual>()
  const [exerciseActual, setExerciseActual] = useState<ExerciseActual | undefined>()

  const today = new Date()
  const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  const todayName = weekdays[today.getDay()];

  //populate exercises and weight
  if (!workoutActual && workout && workout[0] && workout[0].exercises){
    console.log(workout)
    const newWorkoutActual : WorkoutActual = {
      nominalDay: todaysWorkout?.nominalDay,
      description: todaysWorkout?.description,
      exercises: [],
    }
    workout[0].exercises.forEach((exercise)=>(
      newWorkoutActual.exercises.push({
        description: exercise.description,
        sets: [],
      } as ExerciseActual)
    ))
    setWorkoutActual(newWorkoutActual)
  }

  function updateWorkout(newExercise: ExerciseActual) {
  setWorkoutActual(prev => {
    const existingExerciseIndex = prev?.exercises.findIndex(exercise => exercise.description === newExercise.description);
    if (existingExerciseIndex !== -1 && existingExerciseIndex!== undefined) {
      if (!prev){return}
      const updatedExercises = [...prev.exercises];
      updatedExercises[existingExerciseIndex] = newExercise;
      return {
        ...prev,
        exercises: updatedExercises
      };
    } else {
      const newExercises = prev?.exercises ? [...prev.exercises, newExercise] : [newExercise];
      return {
        ...prev,
        exercises: newExercises,
        nominalDay: todaysWorkout?.nominalDay ?? "",
        description: todaysWorkout?.description ?? '',
      } ;
    }
  });
}
  const lastWorkout: WorkoutActual = {
    description: undefined,
    nominalDay: undefined,
    exercises: [],
  };

  if (workout && workout.length > 0) {
    lastWorkout.description = workout[0]?.description;
    lastWorkout.nominalDay = workout[0]?.nominalDay;
    lastWorkout.exercises = workout[0]?.exercises || [];
  }


  if (plan && todaysWorkout===undefined){
    const newWorkout = plan[0]?.workouts.find((workout) => workout.nominalDay === todayName)
    if (newWorkout){
      setTodaysWorkout(newWorkout)
    }
  }

  if (!todaysWorkout){
    return(<div>No Workout</div>)
  }
  if (todaysWorkout ){

  return(
    <div>
      {(!workoutStarted) && todaysWorkout?.exercises?.map((exercise, index)=> (
      <div key={index}>{exercise.description}: {exercise.weight} x {exercise.sets}</div>
    ))}
    <br></br>
    <StartWorkoutButton startWorkout={setWorkoutStarted}/>
    <WorkoutHandler setCurrentExercise={setCurrentExercise} workout={todaysWorkout}/>
    <ExerciseForm 
    lastWorkout={lastWorkout}
    updateWorkout={updateWorkout}
    exerciseActual={exerciseActual}
    updateExercise={setExerciseActual}
    setWorkoutActual={updateWorkout}
    setCurrentExercise={setCurrentExercise} exercise={currentExercise}/>
    {(workoutActual) && <CompletedWork workout={workoutActual}/>}
    <br></br>
    {(workoutActual) && <EndWorkout workout={workoutActual}/>}
    </div>
  )
  }
  

return null
}

interface DoWorkoutProps{
  startWorkout: React.Dispatch<React.SetStateAction<boolean>>;
 
}

function StartWorkoutButton( {startWorkout}: DoWorkoutProps){
  function handleClick(){
    startWorkout(true)
  }
  return(
    <div>
      <button 
      className="p-5 hover:underline hover:bg-slate-300 rounded-full bg-slate-400"
      onClick={handleClick}>Begin Workout</button>
    </div>
  )
}


interface WorkoutHandlerProps{
  setCurrentExercise: React.Dispatch<React.SetStateAction<ModelExercise | undefined>>;
  workout: WorkoutWithExercise;
}

function WorkoutHandler( {workout, setCurrentExercise}: WorkoutHandlerProps){

  function handleClick( thisexercise: ModelExercise){
    setCurrentExercise(thisexercise)
  }
  return(
    <div>
      <div className="flex flex-col items-center">{workout.exercises?.map((exercise, index)=>(
        <div className="flex flex-row items-center m-2" key={index}>
          <div>{exercise.description}</div>
          <button
          onClick={()=> handleClick(exercise)}
        className="p-1 mx-2 hover:underline hover:bg-slate-300 rounded-full bg-slate-400"
          >Begin</button>
        </div>
      ))}</div>
    </div>
  )
}

interface CurrentExerciseProps{
  exercise: ModelExercise | undefined; 
  exerciseActual: ExerciseActual | undefined;
  setCurrentExercise: React.Dispatch<React.SetStateAction<ModelExercise | undefined>>;
  updateExercise: React.Dispatch<React.SetStateAction<ExerciseActual | undefined>>;
  updateWorkout: (newExercise: ExerciseActual)=> void;
  setWorkoutActual: (newExercise: ExerciseActual)=> void;
  lastWorkout: WorkoutActual | undefined;
}

type resultOfSet = {
    weight: number;
    reps: number;
    rir: number;
}

interface saveSetProps {
  weight: number;
  reps: number;
  rir: number;
  event: React.FormEvent<HTMLFormElement>;
}

function ExerciseForm({lastWorkout, exercise, setCurrentExercise, updateExercise, exerciseActual, updateWorkout, setWorkoutActual} : CurrentExerciseProps) {
  //needs to know current exercise, update exerciseActual
  const [data, setData] = useState<resultOfSet[]>([])
  const [lastWeekExercise, setLastWeekExercise] = useState<ExerciseActual>()

  useEffect(() => {if (!lastWeekExercise || lastWeekExercise.description !==exercise?.description){ 
    if (!lastWorkout || lastWorkout.exercises === undefined){
      setLastWeekExercise(undefined)
    } else {
      const lastTimeExercise = lastWorkout.exercises.find((workout) => workout.description === exercise?.description)
      setLastWeekExercise(lastTimeExercise)
    }
  }}, [lastWeekExercise, lastWorkout, exercise])


  const handleSaveSet = ({weight, reps, rir, event}: saveSetProps ) => {
    event.preventDefault();
    const newSet : resultOfSet = {
      weight: weight,
      reps: reps,
      rir: rir,
    }
    if (exerciseActual){
      const newExerciseSets = [...exerciseActual.sets, newSet]
      const newExerciseActual: ExerciseActual = {
        description: exercise?.description ??  "",
        sets: newExerciseSets,
      }
      updateExercise(newExerciseActual)
      setWorkoutActual(newExerciseActual)
    } else {
      const newExerciseSets = [newSet]
      const newExerciseActual: ExerciseActual = {
        description: exercise?.description ??  "",
        sets: newExerciseSets,
      }
      updateExercise(newExerciseActual)
      setWorkoutActual(newExerciseActual)
    }

    const newData = [...data, newSet]
    setData(newData)
    console.log(`weight: ${weight}, reps: ${reps}, rir: ${rir}`)
  };
  function handleSaveExercise(){
    if (exerciseActual){
      updateWorkout(exerciseActual)
    }
    setCurrentExercise(undefined)
    updateExercise(undefined)
    setData([])
  }


  return (
    <div className="p-4">
      <DisplayLastExercise plannedExercise={exercise} lastExercise={lastWeekExercise}/>
      <br></br>
      <SetForm saveSet={handleSaveSet} exercisePlan={exercise} exerciseActual={exerciseActual}/>
      <button
      onClick={handleSaveExercise}
      >Next Exercise</button>
    </div>)

  }
interface DisplayLastExerciseProps{
  lastExercise: ExerciseActual | undefined;
  plannedExercise: ModelExercise | undefined;
}
function DisplayLastExercise({lastExercise, plannedExercise}: DisplayLastExerciseProps){
  if (!lastExercise){return(
    <div>
      <div>Plan: {plannedExercise?.description}</div>
      <div>{plannedExercise?.weight} x {plannedExercise?.sets} at 3 RIR</div>
    </div>
    )}

  return(
    <div className="bg-gray-800 p-4 rounded-md w-64 mx-auto">
      <div className="text-lg font-bold">Last time: </div>
      <div className="text-lg font-bold mb-1">{lastExercise.description}</div>
      <div>
        {lastExercise.sets.map((set, index) => (
          <div key={index} className="text-sm mb-1">
            {set.weight} x {set.reps} at {set.rir} RIR
          </div>
        ))}
      </div>
    </div>
  )
}

type exerciseResult = {
  sets: resultOfSet[];
}

  function DisplayTotalSets({sets}: exerciseResult){
    if (!sets){
      return(<div></div>)
    }
    return(
      <div>
        {sets?.map((currentSet, index)=>(
          <div key={index}>{currentSet.weight} x {currentSet.reps} ({currentSet.rir} RIR)</div>
        ))}
      </div>
    )
  }

interface setFormProps {
  saveSet: ({ weight, reps, rir, event }: { weight: number, reps: number, rir: number, event: React.FormEvent<HTMLFormElement>}) => void;
  exercisePlan: ModelExercise | undefined;
  exerciseActual: ExerciseActual | undefined;
}

function SetForm( {saveSet, exerciseActual, exercisePlan}: setFormProps ) {
  const [weight, setWeight] = useState<number>(0);
  const [reps, setReps] = useState<number>(5);
  const [rir, setRir] = useState<number>(3);
  const [isSubmitted, setIsSubmitted] = useState<boolean>(false);
  const repsInputRef = useRef<HTMLInputElement>(null)


  useEffect(() => {
    const defaultWeight = typeof getMaxWeight(exerciseActual) === "number" ? getMaxWeight(exerciseActual) : (typeof exercisePlan?.weight === "number" ? exercisePlan.weight : 0);

    if (defaultWeight){
      setWeight(defaultWeight)
    } else {
      setWeight(0)
    }
    
  }, [exerciseActual, exercisePlan]);


  const handleWeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWeight(parseInt(event.target.value));
  };

  const handleRepsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setReps(parseInt(event.target.value));
  };

  const handleRirChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRir(parseInt(event.target.value));
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    saveSet({weight: weight, reps: reps, rir: rir, event: event})
    setReps(parseInt(""))
    setIsSubmitted(true);
    repsInputRef.current?.focus()
  };


  return (
<div className="bg-gray-800 w-4/5 mx-auto p-4 rounded-lg">
  <form className="flex flex-wrap items-center justify-center" onSubmit={handleSubmit}>
    <div className="mr-4 mb-4">
      <label className="block font-medium mb-2" htmlFor="weight">
        Weight:
      </label>
      <input
        className="shadow appearance-none border rounded w-24 py-2 px-3 text-black leading-tight focus:outline-none focus:shadow-outline"
        id="weight"
        type="number"
        value={weight}
        onChange={handleWeightChange}
        required
      />
    </div>
    <div className="mr-4 mb-4">
      <label className="block font-medium mb-2" htmlFor="reps">
        Reps:
      </label>
      <input
        className="shadow appearance-none border rounded w-24 py-2 px-3 text-black leading-tight focus:outline-none focus:shadow-outline"
        id="reps"
        type="number"
        ref={repsInputRef}
        value={reps}
        onChange={handleRepsChange}
        required
      />
    </div>
    <div className="mr-4 mb-4">
      <label className="block font-medium mb-2" htmlFor="rir">
        RIR:
      </label>
      <input
        className="shadow appearance-none border rounded w-24 py-2 px-3 text-black leading-tight focus:outline-none focus:shadow-outline"
        id="rir"
        type="number"
        value={rir}
        onChange={handleRirChange}
        required
      />
    </div>
    <button
      className="bg-gray-700 mt-4 hover:bg-gray-800 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      type="submit"
    >
      Save
    </button>
  </form>
</div>
)}

function getMaxWeight(exercise: ExerciseActual | undefined):number|undefined{
  if (!exercise){return undefined}
  let maxWeight = 0
  for (const set of exercise.sets){
    if (set.weight > maxWeight){
      maxWeight = set.weight
    }
  }
  return maxWeight
}


  interface CompletedWorkProps{
    workout: WorkoutActual;
  }

  function CompletedWork({workout}: CompletedWorkProps){
  return (
<div className="bg-gray-800 w-4/5 mx-auto p-4 rounded-lg">
  <h3 className="text-xl font-bold mb-4">{workout.description}</h3>
  <table className="w-full overflow-x-auto border border-gray-400">
    <thead>
      <tr>
        <th className="text-center">Exercise</th>
        <th className="text-center">Set</th>
        <th className="text-center">Reps</th>
        <th className="text-center">Weight</th>
        <th className="text-center">RIR</th>
      </tr>
    </thead>
    <tbody>
      {workout.exercises.map((exercise, exerciseIndex) => (
        <React.Fragment key={exerciseIndex}>
          <tr className="border-t border-b border-gray-400 mt-4 mb-2">
            <td className="font-bold align-middle">
              {exercise.description}
            </td>
            <td colSpan={4}>
              <table className="w-full">
                <tbody>
                  {exercise.sets.map((set, setIndex) => (
                    <tr key={setIndex}>
                      <td className="text-center w-1/4">{setIndex + 1}</td>
                      <td className="text-center w-1/4">{set.reps}</td>
                      <td className="text-center w-1/4">{set.weight === 0 ? "BW" : set.weight}</td>
                      <td className="text-center w-1/4">{set.rir}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </td>
          </tr>
        </React.Fragment>
      ))}
    </tbody>
  </table>
</div>

  )
}

interface EndWorkoutProps{
  workout: WorkoutActual
}

 function EndWorkout({workout}: EndWorkoutProps){
    const {mutate: saveWorkout, isLoading} = api.getWorkouts.saveWorkout.useMutation({
    onSuccess(data, variables, context) {
      console.log(data)
    },
    })
  function saveTodaysWorkout(){
    if ((workout.description!==undefined) && (workout.nominalDay!==undefined)){
      const newWorkout = {
        ...workout,
        nominalDay: workout.nominalDay || "none",
        description: workout.description || "none",
        exercises: workout.exercises.map((exercise)=>({
          ...exercise,
          description: exercise.description || 'none'
        })),
      }
      saveWorkout(newWorkout)
    }
  }
  return(<div>
    <button
    onClick={saveTodaysWorkout}
    >Save Workout</button>
  </div>)
 }