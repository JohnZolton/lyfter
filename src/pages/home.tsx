import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";

import React, { useState, useEffect, SetStateAction } from "react";
import { SignedIn, SignedOut, SignInButton } from "@clerk/nextjs";

import type {
  WorkoutPlan,
  Workout,
  Exercise,
  exerciseSet,
} from "@prisma/client";
import { v4 } from "uuid";
import { NavBar } from "~/pages/components/navbar";
import PageLayout from "~/pages/components/pagelayout";
import LoadingSpinner from "./components/loadingspinner";
import SetDisplay from "./components/setdisplay";
import WorkoutDisplay3 from "./components/workoutdisplay";
import ExerciseDisplay from "./components/exercisedisplay";
import { Button } from "../components/ui/button"



const Home: NextPage = () => {
  const [workoutTitle, setWorkoutTitle]=useState<string|undefined>()
  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
      <div className="flex flex-row items-center justify-between mx-2 mt-4 text-2xl font-semibold">
        <div className="ml-6">{workoutTitle ?? "Current Workouts"}</div>
        <NavBar />
      </div>
        <div className="">
          <SignedIn>
            <WorkoutUiHandler setTitle={setWorkoutTitle}/>
          </SignedIn>
          <SignedOut>
            {/* Signed out users get sign in button */}
            <SignInButton redirectUrl="home">
              <button className="rounded-full bg-slate-700 p-3 text-xl  hover:bg-gray-600">
                Sign In
              </button>
            </SignInButton>
          </SignedOut>
        </div>
      </PageLayout>
    </>
  );
};

export default Home;



interface UiHandlerProps{
  setTitle: React.Dispatch<SetStateAction<string|undefined>>
}
function WorkoutUiHandler({setTitle}:UiHandlerProps) {
  const [workoutPlan, setWorkoutPlan] = useState<
    | (Workout & {
        exercises: (Exercise & {
          sets: (exerciseSet & {
            priorSet?: exerciseSet | null;
          })[];
        })[];
      })[]
    | undefined
  >();
  const [todaysWorkout, setTodaysWorkout] = useState<
    | (Workout & {
        exercises: (Exercise & {
          sets: (exerciseSet & {
            priorSet?: exerciseSet | null;
          })[];
        })[];
      })
    | undefined
  >();

  const { data: userWorkouts, isLoading } =
    api.getWorkouts.getUniqueWeekWorkouts.useQuery();
  
    useEffect(()=>{
      setTitle(todaysWorkout ? `${todaysWorkout?.description}: ${todaysWorkout?.nominalDay}` : undefined)
    }, [todaysWorkout])


  useEffect(() => {
    if (userWorkouts && !todaysWorkout && !workoutPlan && userWorkouts.workoutPlan) {
      const uniqueWorkouts = new Set();
      const workoutsToDisplay: (Workout & {
        exercises: (Exercise & {
          sets: (exerciseSet & {
            priorSet?: exerciseSet | null;
          })[];
        })[];
      })[] = [];
      userWorkouts.workoutPlan.workouts.map((workout) => {
        console.log(workout);
        if (!uniqueWorkouts.has(workout.originalWorkoutId) && workout.exercises.length > 0) {
          uniqueWorkouts.add(workout.originalWorkoutId);
          workoutsToDisplay.push(workout);
        }
      });

      setWorkoutPlan(sortWorkoutsByNominalDay(workoutsToDisplay));
    }
    if (todaysWorkout && workoutPlan){
      //on todaysWorkout change, need to update parent prop workoutPlan
      const workoutIndex = workoutPlan.findIndex(workout => workout.workoutId === todaysWorkout.workoutId)
      if (workoutIndex !== -1 && workoutPlan){
        const updatedPlan = [
          ...workoutPlan.slice(0, workoutIndex),
          todaysWorkout,
          ...workoutPlan.slice(workoutIndex+1),
        ]
        setWorkoutPlan(updatedPlan)
        console.log("plan prop updated")
      }
    }

  }, [userWorkouts, todaysWorkout]);

  function sortWorkoutsByNominalDay(
    workouts: (Workout & {
      exercises: (Exercise & {
        sets: (exerciseSet & {
          priorSet?: exerciseSet | null;
        })[];
      })[];
    })[]
  ) {
    const daysOfWeek = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];
    workouts.sort((a, b) => {
      const dayA = daysOfWeek.indexOf(a.nominalDay);
      const dayB = daysOfWeek.indexOf(b.nominalDay);
      return dayA - dayB;
    });
    return workouts;
  }

  if (isLoading) {
    return (
      <div className="flex justify-center p-10">
        <LoadingSpinner />
      </div>
    );
  }
  function endWorkout() {
    setTodaysWorkout(undefined);
  }

  if (!todaysWorkout) {
    return (
      <div
        style={{ maxWidth: "600px", margin: "0 auto" }}
        className="rounded-lg p-4"
      >
        <SelectDay
          userWorkoutPlan={workoutPlan}
          setTodaysWorkout={setTodaysWorkout}
        />
      </div>
    );
  }
  if (todaysWorkout) {
    return (
      <div className="rounded-lg">
        <WorkoutUi
          endWorkout={endWorkout}
          todaysWorkout={todaysWorkout}
          setTodaysWorkout={setTodaysWorkout}
        />
      </div>
    );
  } else {
    return <div>Something went wrong</div>;
  }
}
interface WorkoutUiProps {
  todaysWorkout: Workout & {
    exercises: (Exercise & {
      sets: (exerciseSet & {
        priorSet?: exerciseSet | null;
      })[];
    })[];
  };
  endWorkout: React.Dispatch<React.SetStateAction<string>>;
  setTodaysWorkout: React.Dispatch<
    React.SetStateAction<
      | (Workout & {
          exercises: (Exercise & {
            sets: (exerciseSet & {
              priorSet?: exerciseSet | null;
            })[];
          })[];
        })
      | undefined
    >
  >;
}

function WorkoutUi({
  todaysWorkout,
  setTodaysWorkout,
  endWorkout,
}: WorkoutUiProps) {
  const today = new Date();

  const { mutate: makeNewWorkout } =
    api.getWorkouts.createNewWorkoutFromPrevious.useMutation({
      onSuccess(data) {
        setTodaysWorkout(data);
      },
    });

  let isNewWorkoutCreated = false; //flag variable to avoid firing multiple times
  useEffect(() => {
    if (todaysWorkout) {
      const oneWeek = 7 * 24 * 60 * 60 * 1000;
      if (today.getTime() - todaysWorkout.date.getTime() > oneWeek) {
        if (!isNewWorkoutCreated) {
          isNewWorkoutCreated = true;
          console.log("need new workout");

          makeNewWorkout({priorWorkoutId: todaysWorkout.workoutId});
        }
      }
    }
  }, [todaysWorkout]);

  return (
    <div className="flex flex-col items-center  ">
      <WorkoutDisplay3
        workoutPlan={todaysWorkout}
        setWorkoutPlan={setTodaysWorkout}
      />
      <div>
        <Button
          variant={"destructive"}
          onClick={() => endWorkout("")}
        >
          End Workout
        </Button>
      </div>
    </div>
  );
}

interface SelectDayProps {
  setTodaysWorkout: React.Dispatch<
    React.SetStateAction<
      | (Workout & {
          exercises: (Exercise & {
            sets: (exerciseSet & {
              priorSet?: exerciseSet | null;
            })[];
          })[];
        })
      | undefined
    >
  >;

  userWorkoutPlan:
    | (Workout & {
        exercises: (Exercise & {
          sets: (exerciseSet & {
            priorSet?: exerciseSet | null;
          })[];
        })[];
      })[]
    | undefined;
}

function SelectDay({ userWorkoutPlan, setTodaysWorkout }: SelectDayProps) {
  return (
    <div className="rounded-lg bg-slate-800 p-4  shadow-md">
      {userWorkoutPlan &&
        userWorkoutPlan.map((workout) => (
          <div
            key={workout.workoutId}
            className="my-2 flex items-center justify-between"
          >
            <div className="text-lg font-semibold text-slate-100">
              {workout.description}: {workout.nominalDay}
            </div>
            <Button
              value={workout.nominalDay}
              variant={"secondary"}
              onClick={() => setTodaysWorkout(workout)}
            >
              Begin
            </Button>
          </div>
        ))}
    </div>
  );
}

