import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import React, { useState, useTransition } from 'react'
import {
  ClerkProvider,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  useUser,
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton
} from "@clerk/nextjs";
import { userAgent } from "next/server";
import { userInfo } from "os";
import { boolean } from "zod";
import type { User, Workout, WorkoutPlan, ActualWorkout, ActualExercise, exerciseSet } from "@prisma/client"
import { prisma } from "~/server/db";
import { empty } from "@prisma/client/runtime";

//@refresh reset





const Home: NextPage = () => {

  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="text-white text-center flex min-h-screen   flex-col  bg-gradient-to-b from-[#000000] to-[#44454b]">
<nav className="flex items-center justify-between flex-wrap bg-black-500 p-6">
        <SignedIn>

            <div className="text-white   items-end flex p-6 items-right flex-col ">
                <UserButton appearance={{ 
                  elements: { 
                    userButtonAvatarBox: { width: 60, height: 60 } 
                    }
                  }} />
            </div>
        </SignedIn>
  <div className="flex items-center flex-shrink-0 text-white mr-6">
  </div>
  <div className="w-full block flex-grow lg:flex lg:items-center lg:w-auto">
    <div className="text-sm lg:flex-grow">
      <Link href="home" className="block mt-4 lg:inline-block lg:mt-0 text-slate-200 hover:text-white mr-4">Home</Link>
      <Link href="makeplan" className="block mt-4 lg:inline-block lg:mt-0 text-slate-200 hover:text-white mr-4">Edit Workout Plan</Link>
      < Link href="allworkouts" className="block mt-4 lg:inline-block lg:mt-0 text-slate-200 hover:text-white mr-4">Workout History</Link>
    </div>
    <div>
    </div>
  </div>
</nav>
        <div>
          <SignedIn>
          <br></br>
          <NewWorkoutUi />
          <br></br>
      <div>
      </div>
        </SignedIn>
        <SignedOut>
          {/* Signed out users get sign in button */}
          <SignInButton redirectUrl="home">
            <button className="rounded-full text-xl text-black bg-white p-3">Sign In</button>
            </SignInButton>
        </SignedOut>
      </div>
      </main>
    </>
  );
};

export default Home;

function NewWorkoutUi(){
  return(
    <div>
      <MakePplSplit></MakePplSplit>
      <br></br>
      <div>or make your own</div>
      <br></br>
      <WeekForm></WeekForm>
      <TestButton></TestButton>
    </div>
  )
}

function WeekForm(){
  const [daysSelected, setDaysSelected] = useState<string[]>([])
  const daysOfWeek : string[]= ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  
  function handleCheck(newDay: string, checked: boolean){
    if (checked) {
      setDaysSelected(prevDays => [...prevDays, newDay]);
    } else {
      setDaysSelected(prevDays => prevDays.filter(day => day !== newDay));
    }
  }

  const [newPlan, setNewPlan] = useState<WorkoutTemplate[]>([])

  const handlePlanUpdate = (newDay: WorkoutTemplate) => {
    const updatedPlan = [...newPlan, newDay]
    setNewPlan(updatedPlan)
    console.log(updatedPlan)
  }

  const {mutate: makePlan, isLoading} = api.getWorkouts.newTestPlan.useMutation({
    onSuccess(data, variables, context) {
      console.log(data)
    },
    })
    
  const saveWorkout = () => {
    console.log("workout saved: ")
    console.log(newPlan)
    const updatedPlan: WorkoutTemplate[] = emptyWorkoutPlan.map((emptyWorkout)=>{
      const matchingWorkout = newPlan.find((workout) => workout.nominalDay=== emptyWorkout.nominalDay)
      if (matchingWorkout){
        return matchingWorkout
      }
      return emptyWorkout
    })
    console.log(updatedPlan)
    makePlan( { workouts: updatedPlan })
  }

  if (isLoading){
    return(
      <div
        className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-primary motion-reduce:animate-[spin_1.5s_linear_infinite]"
        role="status">
        <span
          className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]"
          >Loading...</span
        >
    </div>
    )
  }

  return(
    <div>
      <div className="text-3xl font-bold text-slate-300 text-center mb-4">Select Workout Days</div>
      <div className="flex flex-col items-center">
        <div className="flex flex-row items-center">
          {daysOfWeek.map((day) => (
            <div key={day} className="flex flex-col items-center">
              <span className="ml-2 text-lg">{day}</span>
              <input type="checkbox" onChange={(event)=>handleCheck(day, event.target.checked)} className="form-checkbox h-6 w-6"/>
            </div>
          ))}
        </div>
      </div>
      <WorkoutForm savePlan={saveWorkout} days={daysSelected} handlePlanUpdate={handlePlanUpdate}/>
    </div>
  )
}

interface WorkoutFormProps {
  days: string[],
  handlePlanUpdate: (newDay: WorkoutTemplate) => void;
  savePlan: () => void;
}

interface WorkoutPlanInput {
  sunday: string;
  monday: string;
  tuesday: string;
  wednesday: string;
  thursday: string;
  friday: string;
  saturday: string;
}


function WorkoutForm( {days, handlePlanUpdate, savePlan} : WorkoutFormProps){

  if (days.length === 0){ return <div></div>}

  const sortedDays = [...days].sort((a, b) => {
    const order = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    return order.indexOf(a) - order.indexOf(b);
  });




  return(
    <div>
    <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-4">Create Your Weekly Workout Plan</h1>
          {sortedDays.map((day) => (
            <div className="flex flex-wrap mb-4" key={day}>
              <label htmlFor={day} className="w-full sm:w-1/4">{day}:</label>
              <div className="w-full sm:w-3/4">
                <NewDay day={day} updatePlan={handlePlanUpdate}/>
              </div>
            </div>
          ))}
          <div className="mt-8">
            <button onClick={savePlan} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Submit</button>
          </div>
    </div>
    </div>
  )
}

interface NewExerciseProps {
  exercises: ExerciseTemplate[] | undefined;
  setExercises: React.Dispatch<React.SetStateAction<ExerciseTemplate[] | undefined>>;
}


function NewExercise({exercises, setExercises}: NewExerciseProps){
  const [description, setDescription] = useState('')
  const [weight, setWeight] = useState(0)
  const [sets, setSets] = useState(0)

  const handleSubmit = (event:React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const newExercise: ExerciseTemplate ={
      description: description,
      weight: weight,
      sets: sets
    };
    console.log(newExercise)
    if (exercises){
      const newExercises: ExerciseTemplate[] = [...exercises, newExercise]
      setExercises(newExercises)
    } else {
      setExercises([newExercise])
    }
    setDescription('')
    setWeight(0)
    setSets(0)
  }
  const handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setDescription(event.target.value);
  };
  const handleWeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWeight(parseInt(event.target.value));
  };
  const handleSetsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSets(parseInt(event.target.value));
  };

  return(
    <div>
      <form onSubmit={handleSubmit}>
        <label>Description: </label>
        <input required className="text-black" type='text' value={description} onChange={handleDescriptionChange}></input>
        <br></br>
        <br></br>
        <label>Weight: </label>
        <input type="number" required  className="text-black"value={weight}  onChange={handleWeightChange}></input>
        <br></br>
        <br></br>
        <label>Sets: </label>
        <input type="number" required  className="text-black" value={sets} onChange={handleSetsChange}></input>
        <br></br>
        <br></br>
        <button type="submit">Add Exercise</button>
      </form>
    </div>
  )
}

interface NewDayProps {
  day: string,
  updatePlan: (newDay: WorkoutTemplate) => void;
}

function NewDay({day, updatePlan}: NewDayProps){
  const [exercises, setExercises] = useState<ExerciseTemplate[]>()
  const [description, setDescription] = useState('')
  const [submittedDescription, setSubmittedDescription] = useState('');
  const [descriptionset, setdescriptionset] = useState(false)
  const [daySaved, setDaySaved] = useState(false)

  const handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setDescription(event.target.value);
};

const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
  event.preventDefault();
  setSubmittedDescription(description);
  setdescriptionset(true)
};
//need to have a running day plan and populate with exercises as they add
const handleSetDay = () => {
  if (description && exercises){
    const dayWorkout: WorkoutTemplate = {
      description: description,
      nominalDay: day,
      exercises: exercises,
    }
    console.log('newday comp')
    console.log(dayWorkout)
    setDescription("");
    updatePlan(dayWorkout)
    setDaySaved(true)
  }
}

  return(
    <div className="">
      <div>
        {!submittedDescription && <form onSubmit={handleSubmit}>
          <label>Description: </label>
          <input
            type="text"
            className="text-black"
            value={description}
            onChange={handleDescriptionChange}
          />
          <button type="submit">Submit</button>
        </form>}
    {submittedDescription && (
      <div>Description: {submittedDescription}</div>
    )}
      </div>
      {exercises &&
      <div className="flex flex-col">
        <table className="min-w-full divide-y">
          <thead>
            <tr>
              <th className="py-2">Description</th>
              <th className="py-2">Weight</th>
              <th className="py-2">Sets</th>
            </tr>
          </thead>
          <tbody className=" divide-y">
            {exercises &&
              exercises.map((exercise) => (
                <tr key={exercise.description}>
                  <td className="py-2">{exercise.description}</td>
                  <td className="py-2">{exercise.weight}</td>
                  <td className="py-2">{exercise.sets}</td>
                </tr>
              ))}
          </tbody>
        </table>
      </div>
      }

      {(!daySaved && descriptionset) && <NewExercise exercises={exercises} setExercises={setExercises}/>}
      {(!daySaved && descriptionset) && <button onClick={handleSetDay}>Save Day</button>}
    </div>
  )
}

function MakePplSplit(){
  const {mutate: makePlan, isLoading} = api.getWorkouts.newTestPlan.useMutation({
    onSuccess(data, variables, context) {
      console.log(data)
    },
    })

  function handleClick(){
    makePlan( {workouts: pplPlanArray})
  }
  return(<div>
      <div className="text-3xl font-bold text-slate-300 text-center mb-4">Our Recommended Plan</div>
      <div className="text-2xl font-bold text-slate-300 text-center mb-4">(Push, Pull, Legs)</div>
    <button
     onClick={handleClick}
     className="p-5 hover:underline hover:bg-slate-300 rounded-full bg-slate-400">Use Recommended</button>
  </div>)
}

type ExerciseTemplate = {
  description: string;
  weight: number;
  sets: number;
};

type WorkoutTemplate = {
  description: string;
  nominalDay: string;
  exercises: ExerciseTemplate[];
}

const emptyWorkoutPlan : WorkoutTemplate[]= [
  {
    description: '',
    nominalDay: 'Sunday',
    exercises: [],
  },
  {
    description: '',
    nominalDay: 'Monday',
    exercises: [],
  },
  {
    description: '',
    nominalDay: 'Tuesday',
    exercises: [],
  },
  {
    description: '',
    nominalDay: 'Wednesday',
    exercises: [],
  },
  {
    description: '',
    nominalDay: 'Thursday',
    exercises: [],
  },
  {
    description: '',
    nominalDay: 'Friday',
    exercises: [],
  },
  {
    description: '',
    nominalDay: 'Saturday',
    exercises: [],
  },
]
const PushFirst = {
  description: "Push #1",
  nominalDay: "Monday",
  exercises: [
    {description: "Atlantis Side Raise", weight: 90, sets: 4},
    {description: "Calf Raise", weight: 220, sets: 4},
    {description: "Machine Press", weight: 185, sets: 3},
    {description: "Incline DB Press", weight: 60, sets: 2},
    {description: "Cable Pushdown", weight: 120, sets: 4},

  ]
}
const PushSecond = {
  description: "Push #2",
  nominalDay: "Thursday",
  exercises: [
    {description: "Machine Press", weight: 185, sets: 3},
    {description: "Incline DB Press", weight: 60, sets: 2},
    {description: "Cable Upright Row", weight: 70, sets: 4},
    {description: "Cable Pushdown", weight: 120, sets: 4},
    {description: "Leg Raise", weight: 0, sets: 4},
  ]
}
const LegFirst = {
  description: "Legs #1",
  nominalDay: "Tuesday",
  exercises: [
    {description: "DB RDL", weight: 100, sets: 2},
    {description: "Belt Squat", weight: 135, sets: 4},
    {description: "Candlesticks", weight: 0, sets: 4},
  ]
}
const LegSecond = {
  description: "Legs #2",
  nominalDay: "Friday",
  exercises: [
    {description: "Belt Squat", weight: 135, sets: 4},
    {description: "Ham Curl", weight: 100, sets: 4},
    {description: "Calf Raise", weight: 220, sets: 4},
  ]
}
const PullFirst = {
  description: "Pull #1",
  nominalDay: "Wednesday",
  exercises: [
    {description: "Calf Raise", weight: 220, sets: 4},
    {description: "Lat Pulldown", weight: 140, sets: 4},
    {description: "Machine Row", weight: 185, sets: 4},
    {description: "Bicep Curl", weight: 40, sets: 4},
  ]
}
const PullSecond = {
  description: "Pull #2",
  nominalDay: "Saturday",
  exercises: [
    {description: "Machine Row", weight: 185, sets: 4},
    {description: "Lat Pulldown", weight: 140, sets: 4},
    {description: "Atlantis Side Raise", weight: 90, sets: 4},
    {description: "Bicep Curl", weight: 40, sets: 4},
    {description: "Candlesticks", weight: 0, sets: 4},
  ]
}
const pplPlanArray = [PushFirst, PushSecond, LegFirst, LegSecond, PullFirst, PullSecond];
const emptySet = {rir: 3, reps: 5, weight: 0}
const PushFirstTwo = {
  description: "Push #1",
  nominalDay: "Monday",
  exercises: [
    {description: "Atlantis Side Raise", weight: 90, sets: Array(3).fill(emptySet)},
    {description: "Calf Raise", weight: 220, sets: Array(3).fill(emptySet)},
    {description: "Machine Press", weight: 185, sets: Array(3).fill(emptySet)},
    {description: "Incline DB Press", weight: 60, sets: Array(3).fill(emptySet)},
    {description: "Cable Pushdown", weight: 120, sets: Array(3).fill(emptySet)},
  ]}
const PushSecondTwo = {
  description: "Push #2", 
  nominalDay: "Thursday",
  exercises: [
    {description: "Machine Press", weight: 185, sets: Array(3).fill(emptySet)},
    {description: "Incline DB Press", weight: 60, sets: Array(3).fill(emptySet)},
    {description: "Cable Upright Row", weight: 70, sets: Array(3).fill(emptySet)},
    {description: "Cable Pushdown", weight: 120, sets: Array(3).fill(emptySet)},
    {description: "Leg Raise", weight: 0, sets: Array(3).fill(emptySet)},
  ]
}
const LegFirstTwo = {
  description: "Legs #1",
  nominalDay: "Tuesday",
  exercises: [
    {description: "DB RDL", weight: 100, sets: Array(3).fill(emptySet)},
    {description: "Belt Squat", weight: 135, sets: Array(3).fill(emptySet)},
    {description: "Candlesticks", weight: 0, sets: Array(3).fill(emptySet)},
  ]}

const LegSecondTwo= {
  description: "Legs #2",
  nominalDay: "Friday",
  exercises: [
    {description: "Belt Squat", weight: 135, sets: Array(3).fill(emptySet)},
    {description: "Ham Curl", weight: 100, sets: Array(3).fill(emptySet)},
    {description: "Calf Raise", weight: 220, sets: Array(3).fill(emptySet)},
  ]}

const PullFirstTwo={
  description: "Pull #1",
  nominalDay: "Wednesday",
  exercises:[
    {description: "Calf Raise", weight: 220, sets: Array(3).fill(emptySet)},
    {description: "Lat Pulldown", weight: 140, sets: Array(3).fill(emptySet)},
    {description: "Machine Row", weight: 185, sets: Array(3).fill(emptySet)},
    {description: "Bicep Curl", weight: 40, sets: Array(3).fill(emptySet)},
  ]
}

const PullSecondTwo = {
  description: "Push #2",
  nominalDay: "Saturday",
  exercises:[
    {description: "Machine Row", weight: 185, sets: Array(3).fill(emptySet)},
    {description: "Lat Pulldown", weight: 140, sets: Array(3).fill(emptySet)},
    {description: "Atlantis Side Raise", weight: 90, sets: Array(3).fill(emptySet)},
    {description: "Bicep Curl", weight: 40, sets: Array(3).fill(emptySet)},
    {description: "Candlesticks", weight: 0, sets: Array(3).fill(emptySet)},
  ]}


const pplPlanArrayTwo= [PushFirstTwo, PushSecondTwo, LegFirstTwo, LegSecondTwo, PullFirstTwo, PullSecondTwo];

function TestButton(){
  const {mutate: makePlan, isLoading} = api.getWorkouts.newTestPlanTwo.useMutation({
    onSuccess(data, variables, context) {
      console.log(data)
      console.log('WE DID IT')
    }})

  function handleClick(){
    console.log('success')
    makePlan( {workouts: pplPlanArrayTwo})
  }
  return(<div>
    <button onClick={handleClick}>Make test plan</button>
  </div>)
}