import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";

import React, { useState, useRef, useEffect } from "react";
import { SignedIn, SignedOut, SignInButton } from "@clerk/nextjs";

import type {
  ActualWorkout,
  ActualExercise,
  exerciseSet,
} from "@prisma/client";
import { v4 } from "uuid";
import { NavBar } from "~/pages/components/navbar";
import PageLayout from "~/pages/components/pagelayout";
import SetDisplay from "./components/setdisplay";
import WorkoutDisplay3 from "./components/workoutdisplay";
import ExerciseDisplay from "./components/exercisedisplay";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <NavBar />
        <div>
          <SignedIn>
            <br></br>
            <NewWorkoutUi />
            <br></br>
            <div></div>
          </SignedIn>
          <SignedOut>
            {/* Signed out users get sign in button */}
            <SignInButton redirectUrl="home">
              <button className="rounded-full bg-gray-700 p-3 text-xl text-white hover:bg-gray-600">
                Sign In
              </button>
            </SignInButton>
          </SignedOut>
        </div>
      </PageLayout>
    </>
  );
};

export default Home;

function NewWorkoutUi() {
  return (
    <>
      <div className="mb-2 pt-1 text-center text-2xl font-semibold  ">
        Edit Workout Plan
      </div>
      <div className="flex flex-col items-center rounded-lg  shadow-md">
        <EditWorkoutMenu />
      </div>
    </>
  );
}
function filterUniqueWorkouts(
  userWorkouts: (ActualWorkout & {
    exercises: (ActualExercise & {
      sets: (exerciseSet & {
        priorSet?: exerciseSet | null;
      })[];
    })[];
  })[]
) {
  const uniqueWorkouts = new Set();
  const workoutsToDisplay: (ActualWorkout & {
    exercises: (ActualExercise & {
      sets: (exerciseSet & {
        priorSet?: exerciseSet | null;
      })[];
    })[];
  })[] = [];
  userWorkouts.map((workout) => {
    if (!uniqueWorkouts.has(workout.originalWorkoutId) && workout.exercises.length > 0) {
      uniqueWorkouts.add(workout.originalWorkoutId);
      workoutsToDisplay.push(workout);
    }
  });
  return workoutsToDisplay;
}

function EditWorkoutMenu() {
  const [workoutPlan, setWorkoutPlan] = useState<
    | (ActualWorkout & {
        exercises: (ActualExercise & {
          sets: (exerciseSet & { priorSet?: exerciseSet | null })[];
        })[];
      })[]
    | undefined
  >();
  const [planId, setPlanId] = useState("");
  function sortWorkoutsByNominalDay(
    workouts: (ActualWorkout & {
      exercises: (ActualExercise & {
        sets: (exerciseSet & { priorSet?: exerciseSet | null })[];
      })[];
    })[]
  ) {
    const daysOfWeek = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];
    const sortedWorkouts = [...workouts];

    sortedWorkouts.sort((a, b) => {
      const dayA = daysOfWeek.indexOf(a.nominalDay);
      const dayB = daysOfWeek.indexOf(b.nominalDay);
      return dayA - dayB;
    });

    return sortedWorkouts;
  }
  let workoutPlanSet = false;

  const { data: userWorkoutData, isLoading: workoutsLoading } =
    api.getWorkouts.getUniqueWeekWorkouts.useQuery();

  const userWorkouts = userWorkoutData?.workoutPlan?.workouts;
  if (
    !workoutsLoading &&
    userWorkouts !== undefined &&
    userWorkouts &&
    !workoutPlan &&
    !workoutPlanSet
  ) {
    console.log("user workouts:");

    const workoutPlanActual = userWorkouts
      ? sortWorkoutsByNominalDay(filterUniqueWorkouts(userWorkouts))
      : [];
    //console.log(workoutPlanActual)
    setWorkoutPlan(workoutPlanActual);
    workoutPlanSet = true;
    console.log(workoutPlanActual);
    setPlanId(workoutPlanActual[0]?.planId ?? "");
  }

  const MENU_ACTIONS = {
    NONE: "none",
    CREATE: "create",
    EDIT: "edit",
  };
  const [currentAction, setCurrentAction] = useState(MENU_ACTIONS.NONE);

  return (
    <div className="flex flex-col items-center rounded-lg">
      <WorkoutPlanForm
        workoutPlan={workoutPlan}
        setWorkoutPlan={setWorkoutPlan}
      />
      <button
        onClick={() => setCurrentAction(MENU_ACTIONS.NONE)}
        className="mt-4 rounded bg-blue-600 px-2 py-1 font-bold  hover:bg-blue-700"
      >
        Main Menu
      </button>
    </div>
  );
}

interface WorkoutDisplayHandlerProps {
  fullWorkoutPlan:
    | (ActualWorkout & {
        exercises: (ActualExercise & {
          sets: (exerciseSet & { priorSet?: exerciseSet | null })[];
        })[];
      })[]
    | undefined;

  workoutPlan:
    | (ActualWorkout & {
        exercises: (ActualExercise & {
          sets: (exerciseSet & { priorSet?: exerciseSet | null })[];
        })[];
      })
    | undefined;
  setWorkoutPlan: React.Dispatch<
    React.SetStateAction<
      | (ActualWorkout & {
          exercises: (ActualExercise & {
            sets: (exerciseSet & {
              priorSet?: exerciseSet | null;
            })[];
          })[];
        })[]
      | undefined
    >
  >;
}
function WorkoutDisplayHandler({
  workoutPlan,
  setWorkoutPlan,
  fullWorkoutPlan,
}: WorkoutDisplayHandlerProps) {
  const [workout, setWorkout] = useState<
    | (ActualWorkout & {
        exercises: (ActualExercise & {
          sets: (exerciseSet & {
            priorSet?: exerciseSet | null | undefined;
          })[];
        })[];
      })
    | undefined
  >();
  useEffect(() => {
    setWorkout(workoutPlan);
  }, [workoutPlan]);

  useEffect(() => {
    console.log("edit workout fired");
    const workoutIndex = fullWorkoutPlan?.findIndex((w) => w === workoutPlan);
    if (
      workoutIndex !== -1 &&
      workoutIndex !== undefined &&
      workout &&
      fullWorkoutPlan &&
      workout !== fullWorkoutPlan[workoutIndex]
    ) {
      setWorkoutPlan((prev) => {
        if (!prev || workout === prev[workoutIndex]) {
          return [workout];
        } else {
          return [
            ...prev.slice(0, workoutIndex),
            workout,
            ...prev.slice(workoutIndex + 1),
          ];
        }
      });
    }
  }, [workout]);

  return (
    <div>
      {workoutPlan && (
        <WorkoutDisplay3
          workoutPlan={workoutPlan}
          setWorkoutPlan={setWorkout}
        />
      )}
    </div>
  );
}

interface WorkoutPlanFormProps {
  workoutPlan:
    | (ActualWorkout & {
        exercises: (ActualExercise & {
          sets: (exerciseSet & { priorSet?: exerciseSet | null })[];
        })[];
      })[]
    | undefined;
  setWorkoutPlan: React.Dispatch<
    React.SetStateAction<
      | (ActualWorkout & {
          exercises: (ActualExercise & {
            sets: (exerciseSet & {
              priorSet?: exerciseSet | null;
            })[];
          })[];
        })[]
      | undefined
    >
  >;
}
function WorkoutPlanForm({
  workoutPlan,
  setWorkoutPlan,
}: WorkoutPlanFormProps) {
  const [planId, setPlanId] = useState("");
  if (!planId && workoutPlan && workoutPlan[0]?.planId){setPlanId(workoutPlan[0]?.planId)}

  function addWorkout( 
    workout:
      | (ActualWorkout & {
          exercises: (ActualExercise & {
            sets: (exerciseSet & { priorSet?: exerciseSet | null })[];
          })[];
        })
      | undefined
  ) {
    console.log(workout);
    if (!workout) {
      return;
    }
    const newWorkoutPlan = workoutPlan ? [...workoutPlan, workout] : [workout];
    setWorkoutPlan(newWorkoutPlan);
  }

  return (
    <div className="flex flex-col items-center rounded-lg">
      {workoutPlan?.map((workout) => (
        <WorkoutDisplayHandler
          workoutPlan={workout}
          setWorkoutPlan={setWorkoutPlan}
          fullWorkoutPlan={workoutPlan}
          key={workout.workoutId}
        />
      ))}
      <WorkoutDayForm planId={planId} addWorkout={addWorkout} />
    </div>
  );
}

interface WorkoutDayFormProps {
  addWorkout: (
    workout:
      | (ActualWorkout & {
          exercises: (ActualExercise & {
            sets: (exerciseSet & { priorSet?: exerciseSet | null })[];
          })[];
        })
      | undefined
  ) => void;
  planId: string | undefined;
}

function WorkoutDayForm({ addWorkout, planId }: WorkoutDayFormProps) {
  const [dayDescription, setDayDescription] = useState("");
  const [nominalDay, setNominalDay] = useState("");
  const [showAddExercises, setShowAddExercises] = useState(false);
  const [workoutDayPlan, setWorkoutDayPlan] = useState<
    WorkoutTemplate | undefined
  >(undefined);

  const { mutate: saveNewWorkout } =
    api.getWorkouts.updateWorkoutPlan.useMutation({
      onSuccess(data) {
        console.log(data);
        addWorkout(data);
      },
    });

  function handleAddExercises() {
    console.log(dayDescription, nominalDay);
    if (dayDescription && nominalDay) {
      setShowAddExercises(true);
    }
  }
  function updateWorkoutPlan(exercises: ExerciseTemplate[]) {
    if (dayDescription && nominalDay) {
      const newWorkoutPlan: WorkoutTemplate = {
        workoutId: createUniqueId(),
        description: dayDescription,
        nominalDay: nominalDay,
        exercises: exercises,
      };
      setWorkoutDayPlan(newWorkoutPlan);
      console.log(newWorkoutPlan);
      console.log("Plan Id: ", planId);
      if (planId) {
        saveNewWorkout({ ...newWorkoutPlan, planId: planId });
      } else {
        saveNewWorkout({ ...newWorkoutPlan, planId: createUniqueId() });
      }

      setShowAddExercises(false);
      setDayDescription("");
      setNominalDay("");
    }
  }
  const inputRef = useRef<HTMLInputElement | null>(null);

  return (
    <div className="flex flex-col items-center justify-center">
      {!showAddExercises && (
        <form onSubmit={handleAddExercises}>
          <div className="space-y-5">
            <div className="rounded-lg bg-gray-900 p-5 text-white">
              <label className="font-bold">Day Description:</label>
              <input
                required
                ref={inputRef}
                value={dayDescription}
                onChange={(event) => setDayDescription(event.target.value)}
                className="w-full rounded-lg bg-gray-700 p-1 text-white focus:outline-none"
                type="text"
              ></input>
              <div>
                <label className="font-bold">Nominal Day: </label>
                <select
                  value={nominalDay}
                  onChange={(event) => setNominalDay(event.target.value)}
                  required
                  className="w-full rounded-lg bg-gray-700 p-1 text-white focus:outline-none"
                >
                  <option value="">Select Day</option>
                  <option value="Monday">Monday</option>
                  <option value="Tuesday">Tuesday</option>
                  <option value="Wednesday">Wednesday</option>
                  <option value="Thursday">Thursday</option>
                  <option value="Friday">Friday</option>
                  <option value="Saturday">Saturday</option>
                  <option value="Sunday">Sunday</option>
                </select>
              </div>
              <button
                type="submit"
                className="mt-4 rounded bg-blue-600 px-2 py-1 font-bold text-white hover:bg-blue-700"
              >
                Add Exercsies
              </button>
            </div>
          </div>
        </form>
      )}
      <br></br>
      {showAddExercises && <AddExerciseForm updatePlan={updateWorkoutPlan} />}
      <br></br>
    </div>
  );
}

interface AddExerciseFormProps {
  updatePlan: (exercise: ExerciseTemplate[]) => void;
}

function AddExerciseForm({ updatePlan }: AddExerciseFormProps) {
  const [exercises, setExercises] = useState<ExerciseTemplate[]>();

  function saveExercises() {
    if (exercises) {
      updatePlan(exercises);
      setExercises([]);
    }
  }
  return (
    <div className="flex flex-col items-center justify-center rounded-lg bg-gray-900 text-white">
      <div className="">
        {exercises?.map((exercise, index) => (
          <div key={index} className="pt-2 font-semibold">
            {exercise.description}: {exercise?.sets[0]?.weight} x{" "}
            {exercise.sets.length}
          </div>
        ))}
      </div>
      <div className="w-full">
        <NewExercise setExercises={setExercises} exercises={exercises} />
      </div>
      <button
        onClick={saveExercises}
        className="mt-4 rounded bg-blue-600 px-2 py-1 font-bold text-white hover:bg-blue-700"
      >
        Save Day
      </button>
    </div>
  );
}

interface NewExerciseProps {
  exercises: ExerciseTemplate[] | undefined;
  setExercises: React.Dispatch<
    React.SetStateAction<ExerciseTemplate[] | undefined>
  >;
}

function NewExercise({ exercises, setExercises }: NewExerciseProps) {
  const [description, setDescription] = useState("");
  const [weight, setWeight] = useState(0);
  const [reps, setReps] = useState(5);
  const [sets, setSets] = useState(1);
  const inputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (sets) {
      const newExercise: ExerciseTemplate = {
        id: createUniqueId(),
        description: description,
        sets: Array(sets).fill({
          ...emptySet,
          weight: weight,
          reps: reps,
        }) as SetTemplate[],
      };
      if (exercises) {
        const newExercises: ExerciseTemplate[] = [...exercises, newExercise];
        setExercises(newExercises);
        console.log(newExercises);
      } else {
        setExercises([newExercise]);
        console.log(newExercise);
      }
    }
    inputRef.current?.focus();
    setDescription("");
    setWeight(0);
    setSets(1);
  };
  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setDescription(event.target.value);
  };
  const handleRepsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setReps(parseInt(event.target.value));
  };
  const handleWeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setWeight(parseInt(event.target.value));
  };
  const handleSetsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSets(parseInt(event.target.value));
  };

  return (
    <div className="flex flex-row justify-center rounded-lg bg-gray-900 p-5 text-white">
      <form
        onSubmit={handleSubmit}
        className="w-full items-center justify-center space-y-1"
      >
        <div className="w-full p-1  sm:w-auto">
          <label htmlFor="description" className="mr-2">
            Exercise:
          </label>
          <div className="flex items-center">
            <input
              id="description"
              type="text"
              ref={inputRef}
              required
              className="w-full rounded-md bg-gray-800 px-2 py-1 text-white focus:outline-none sm:w-48"
              value={description}
              onChange={handleDescriptionChange}
            />
          </div>
        </div>
        <div className="flex w-full flex-row space-x-4">
          <div className="w-full sm:w-auto">
            <label htmlFor="weight" className="mr-2">
              Weight:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-14 rounded-md bg-gray-800 px-2 py-1 text-center text-white focus:outline-none"
                value={weight}
                onChange={handleWeightChange}
              />
            </div>
          </div>
          <div className="w-full  sm:w-auto">
            <label htmlFor="weight" className="mr-2">
              Reps:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="weight"
                type="number"
                required
                className="w-12 rounded-md bg-gray-800 px-2 py-1 text-center text-white focus:outline-none"
                value={reps}
                onChange={handleRepsChange}
              />
            </div>
          </div>

          <div className="w-full  sm:w-auto">
            <label htmlFor="sets" className="mr-2">
              Sets:
            </label>
            <div className="flex items-center justify-center">
              <input
                id="sets"
                type="number"
                min="1"
                required
                className="w-12 rounded-md bg-gray-800 px-2 py-1 text-center text-white focus:outline-none"
                value={sets}
                onChange={handleSetsChange}
              />
            </div>
          </div>
        </div>

        <div className="flex justify-center">
          <button
            type="submit"
            className="mt-4 rounded bg-blue-600 px-2 py-1 font-bold text-white hover:bg-blue-700"
          >
            Add Exercise
          </button>
        </div>
      </form>
    </div>
  );
}

function createUniqueId(): string {
  return v4();
}

type ExerciseTemplate = {
  id: string;
  description: string;
  sets: SetTemplate[];
};

type SetTemplate = {
  weight: number;
  reps: number;
  rir: number;
};

type WorkoutTemplate = {
  description: string;
  nominalDay: string;
  workoutId: string;
  exercises: ExerciseTemplate[];
};

const emptySet = { rir: 3, reps: 5, weight: 0 };
const PushFirstTwo = {
  description: "Push #1",
  nominalDay: "Monday",
  workoutId: createUniqueId(),
  exercises: [
    {
      id: createUniqueId(),
      description: "Atlantis Side Raise",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Calf Raise",
      weight: 220,
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Machine Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Incline DB Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Cable Pushdown",
      sets: Array(3).fill(emptySet),
    },
  ],
};
const PushSecondTwo = {
  description: "Push #2",
  workoutId: createUniqueId(),
  nominalDay: "Thursday",
  exercises: [
    {
      id: createUniqueId(),
      description: "Machine Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Incline DB Press",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Cable Upright Row",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Cable Pushdown",
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Leg Raise",
      id: createUniqueId(),
      weight: 0,
      sets: Array(3).fill(emptySet),
    },
  ],
};
const LegFirstTwo = {
  description: "Legs #1",
  workoutId: createUniqueId(),
  nominalDay: "Tuesday",
  exercises: [
    {
      id: createUniqueId(),
      description: "DB RDL",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Belt Squat",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Candlesticks",
      sets: Array(3).fill(emptySet),
    },
  ],
};

const LegSecondTwo = {
  description: "Legs #2",
  nominalDay: "Friday",
  workoutId: createUniqueId(),
  exercises: [
    {
      description: "Belt Squat",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Ham Curl",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Calf Raise",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
  ],
};

const PullFirstTwo = {
  description: "Pull #1",
  nominalDay: "Wednesday",
  workoutId: createUniqueId(),
  exercises: [
    {
      description: "Calf Raise",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Lat Pulldown",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Machine Row",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Bicep Curl",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
  ],
};

const PullSecondTwo = {
  description: "Pull #2",
  nominalDay: "Saturday",
  workoutId: createUniqueId(),
  exercises: [
    {
      description: "Machine Row",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      description: "Lat Pulldown",
      id: createUniqueId(),
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Atlantis Side Raise",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Bicep Curl",
      sets: Array(3).fill(emptySet),
    },
    {
      id: createUniqueId(),
      description: "Candlesticks",
      sets: Array(3).fill(emptySet),
    },
  ],
};

const pplPlanArrayTwo = [
  PushFirstTwo,
  PushSecondTwo,
  LegFirstTwo,
  LegSecondTwo,
  PullFirstTwo,
  PullSecondTwo,
];

function TestButton() {
  const { mutate: makePlan, isLoading } =
    api.getWorkouts.newTestPlanTwo.useMutation({
      onSuccess(data, variables, context) {
        console.log(data);
        window.location.reload();
      },
    });

  function handleClick() {
    makePlan({ description: "Push Pull Legs", workouts: pplPlanArrayTwo });
  }
  return (
    <div className="flex justify-center">
      <button
        className="rounded-full bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-600"
        onClick={handleClick}
      >
        Use Recommended Plan
      </button>
    </div>
  );
}

interface WorkoutDescriptionProps {
  description: string;
  nominalDay: string;
  workoutNumber: string;
  removeWorkoutFromDisplay: (workoutId: string) => void;
  updateDescription: (
    description: string,
    workoutNumber: string,
    nominalDay: string
  ) => void;
}

function WorkoutDescription({
  removeWorkoutFromDisplay,
  updateDescription,
  workoutNumber,
  description,
  nominalDay,
}: WorkoutDescriptionProps) {
  const [descriptionInputActive, setDescriptionInputActive] = useState(false);
  const [workoutDescription, setWorkoutDescription] = useState(description);
  const [nominalDayInputActive, setNominalDayInputActive] = useState(false);
  const [nominalDayInput, setNominalDayInput] = useState(nominalDay);

  const handleBlur = () => {
    if (description.length > 0) {
      setDescriptionInputActive(false);
    }
    setNominalDayInputActive(false);
    updateDescription(workoutDescription, workoutNumber, nominalDayInput);
  };
  const handleDescriptionClick = () => {
    setDescriptionInputActive(true);
  };
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter" || event.key === "Escape") {
      handleBlur();
    }
  };
  const handleDescriptionChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const value = event.target.value;
    setWorkoutDescription(value);
  };

  const handleNominalDayClick = () => {
    setNominalDayInputActive(true);
  };

  const handleNominalDayChange = (
    event: React.ChangeEvent<HTMLSelectElement>
  ) => {
    const value = event.target.value;
    setNominalDayInput(value);
    setNominalDayInputActive(false);
    updateDescription(workoutDescription, workoutNumber, value);
  };
  const { mutate: deleteWorkout } = api.getWorkouts.removeWorkout.useMutation({
    onSuccess(data) {
      console.log(data);
    },
  });
  const handleRemoveWorkout = () => {
    deleteWorkout({ workoutId: workoutNumber });
    removeWorkoutFromDisplay(workoutNumber);
  };

  return (
    <div className="flex items-center justify-center space-x-2">
      {descriptionInputActive ? (
        <input
          type="text"
          value={workoutDescription}
          onChange={handleDescriptionChange}
          onKeyDown={handleKeyDown}
          onBlur={handleBlur}
          className="w-40 rounded-md bg-gray-800 px-2 py-1 text-white focus:outline-none"
          autoFocus
        />
      ) : (
        <span
          className="cursor-pointer rounded-md bg-gray-900 px-2 py-1 font-semibold text-white hover:bg-gray-500"
          onClick={handleDescriptionClick}
        >
          {workoutDescription}
        </span>
      )}{" "}
      {nominalDayInputActive ? (
        <select
          value={nominalDayInput}
          onChange={handleNominalDayChange}
          onBlur={handleBlur}
          required
          onSubmit={handleNominalDayChange}
          className="rounded-md bg-gray-800 p-1 text-white focus:outline-none"
        >
          <option value="">Select Day</option>
          <option value="Monday">Monday</option>
          <option value="Tuesday">Tuesday</option>
          <option value="Wednesday">Wednesday</option>
          <option value="Thursday">Thursday</option>
          <option value="Friday">Friday</option>
          <option value="Saturday">Saturday</option>
          <option value="Sunday">Sunday</option>
        </select>
      ) : (
        <span
          className="cursor-pointer rounded-md bg-gray-900 px-2 py-1 font-semibold text-white hover:bg-gray-500"
          onClick={handleNominalDayClick}
        >
          {nominalDayInput}
        </span>
      )}
      <button
        onClick={handleRemoveWorkout}
        className="inline-flex items-center rounded bg-red-600 px-2 py-1 font-bold text-white hover:bg-red-700"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-5 w-5"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fillRule="evenodd"
            d="M10 11.414L15.657 17.071l1.414-1.414L11.414 10l5.657-5.657L15.657 2.93 10 8.586 4.343 2.93 2.93 4.343 8.586 10l-5.657 5.657 1.414 1.414L10 11.414z"
            clipRule="evenodd"
          />
        </svg>
      </button>
    </div>
  );
}
