import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import React, {
  useState,
  useTransition,
  useRef,
  useEffect,
  HtmlHTMLAttributes,
} from "react";
import {
  ClerkProvider,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  useUser,
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton,
} from "@clerk/nextjs";
import { userAgent } from "next/server";
import { userInfo } from "os";
import { boolean, record } from "zod";
import type {
  User,
  Workout,
  WorkoutPlan,
  ActualWorkout,
  ActualExercise,
  exerciseSet,
  WorkoutPlanTwo,
} from "@prisma/client";
import { prisma } from "~/server/db";
import { empty } from "@prisma/client/runtime";
import { SourceTextModule } from "vm";
import { v4 } from "uuid";
import { existsSync } from "fs";
import { create } from "domain";
import { useRouter } from "next/router";
import { describe } from "node:test";
import { TEMPORARY_REDIRECT_STATUS } from "next/dist/shared/lib/constants";
import { faSortNumericDown } from "@fortawesome/free-solid-svg-icons";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Lyfter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-gradient-to-b   from-[#000000]  to-[#44454b]  text-white">
        <nav className="flex items-center justify-between">
          <SignedIn>
            <div className="m-2 flex flex-col text-white ">
              <UserButton
                appearance={{
                  elements: { userButtonAvatarBox: { width: 45, height: 45 } },
                }}
              />
            </div>
          </SignedIn>
          <div className="flex space-x-6 pr-4">
            <Link
              href="home"
              className="text-gray-300 hover:text-white hover:underline"
            >
              Home
            </Link>
            <Link
              href="newplan"
              className="text-gray-300 hover:text-white hover:underline"
            >
              New Plan
            </Link>
            <Link
              href="makeplan"
              className="text-gray-300 hover:text-white hover:underline"
            >
              Edit Plan
            </Link>
            <Link
              href="allworkouts"
              className="text-gray-300 hover:text-white hover:underline"
            >
              History
            </Link>
          </div>
        </nav>
        <div>
          <SignedIn>
            <br></br>
            <Content />
            <br></br>
            <div></div>
          </SignedIn>
          <SignedOut>
            {/* Signed out users get sign in button */}
            <SignInButton redirectUrl="home">
              <button className="rounded-full bg-white p-3 text-xl text-black">
                Sign In
              </button>
            </SignInButton>
          </SignedOut>
        </div>
      </main>
    </>
  );
};

export default Home;

function Content(){
    const user = useUser()
    
    return (
        <div>
            <Workouts/>
        </div>
    )
}

function Workouts() { 
    const { data: workoutPlans, isLoading: workoutsLoading } = api.getWorkouts.getPlanByUserId.useQuery()

    const [selectedPlan, setSelectedPlan ] = useState<WorkoutPlanTwo & {
    workouts: (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
}>()

    if (workoutsLoading) {
        return (
            <div>
              <div
              className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-primary motion-reduce:animate-[spin_1.5s_linear_infinite]"
              role="status">
              <span
                className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]"
                >Loading...</span
              >
            </div>
            </div>
        )}


    if (!workoutPlans || workoutPlans === undefined){
        return(<div>No Workout History</div>)
    }

    const handleButtonClick = (plan: WorkoutPlanTwo & {
    workouts: (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
}) => {
      setSelectedPlan(plan)
    }

    return (
        <div className="flex flex-wrap">
          <DisplayPlan plan={selectedPlan}/>
              <div>
      { (!selectedPlan) && workoutPlans.map((plan) => (
        <div key={plan.planId}>
          <h2>{plan.description}
          {" "}<button
          onClick={() => handleButtonClick(plan)}
          >Select</button>
          </h2>
        </div>
      ))}
    </div>
        </div>
    )
}

interface DisplayPlanProps {
  plan: WorkoutPlanTwo & {
    workouts: (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
} | undefined;
}

interface SortedWorkouts {
  'Sunday': (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
  'Monday': (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
  'Tuesday': (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
  'Wednesday': (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
  'Thursday': (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
  'Friday': (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
  'Saturday': (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[];
}

function DisplayPlan({plan}: DisplayPlanProps){
  const [workoutList, setWorkoutList] = useState<SortedWorkouts>()
  if (!plan){
    return(
      <div></div>
    )
  }

  function sortWorkoutsByDay(workouts: (ActualWorkout & {
        exercises: (ActualExercise & {
            sets: exerciseSet[];
        })[];
    })[]): SortedWorkouts {

    const sortedWorkouts: SortedWorkouts = {
      'Sunday': [],
      'Monday': [],
      'Tuesday': [],
      'Wednesday': [],
      'Thursday': [],
      'Friday': [],
      'Saturday': []
    }
    for (const workout of workouts){
      sortedWorkouts[workout.nominalDay as keyof SortedWorkouts].push(workout)
    }
    return sortedWorkouts
  }

  if (!workoutList){
    setWorkoutList(sortWorkoutsByDay(plan.workouts))
  }
  
  return(
    <div className="flex flex-col">
    {workoutList && Object.keys(workoutList).map((day)=> (
      <div key={day} className="flex flex-col">
        <h2 className="text-2xl font-bold">{day}</h2>
        <div className="flex overflow-x-scroll space-x-4">
          {workoutList[day as keyof typeof workoutList].map((workout)=> (
            <div key={workout.workoutId}>
              {workout.exercises.map((exercise, index)=>(
                <div key={exercise.exerciseId}>
                  <p className="text-base">{exercise.description}</p>
                  {exercise.sets.map((set, setIndex)=> (
                    <div key={set.setId}>
                      <p>Set {setIndex+1}: {set.weight}lbs x {set.reps} @ {set.rir}</p>
                    </div>
                  ))}
                </div>
              ))}
            </div>
          ))}
        </div>
      </div>
    ))}
    </div>
  )
}

interface DayDisplayProps {
  workoutsByDay: SortedWorkouts | undefined
}

function DayDisplay({workoutsByDay}: DayDisplayProps){
  console.log(workoutsByDay)
  return(
  <div>
    day display here
  </div>)
}

interface ExerciseDisplayProps {
  exercise: ActualExercise & {
    sets: exerciseSet[];
}
}

function ExerciseDisplay( {exercise} : ExerciseDisplayProps){
      
  if (exercise) {
    return (
      <div className="container mx-auto overflow-x-auto" key={exercise.exerciseId}>
        <div>{exercise.description}</div>
        <table >
            <thead>
              <tr>
                <th>Weight</th>
                <th>Reps</th>
                <th>RIR</th>
              </tr>
            </thead>
            <tbody>
              { exercise && exercise.sets.map((set, index) =>(
                <tr key={index}>
                  <td>{set.weight}</td>
                  <td>{set.reps}</td>
                  <td>{set.rir}</td>
                </tr>
              )) }
            </tbody>
          </table>
      </div>
    );
  }
  return <div>No data</div>;
}
  
