// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  workoutId  String    @id @default(cuid())
  date       DateTime   @default(now())
  nominalDay String
  userId     String 
  description String
  //maybe add mesocycles and weeks for clumping/display?
  @@index([userId])
}

model WorkoutPlan {
  planId  String    @id @default(cuid())
  userId     String  @unique
  sunday String
  monday String
  tuesday String
  wednesday String
  thursday String
  friday String
  saturday String

  @@index([userId])
}

model Exercise {
  exerciseId  String @id @default(cuid())
  date       DateTime   @default(now())
  description String
  weight      Int
  sets        String
  workoutId String

  @@index([workoutId])
}

model TestWorkout {
  workoutId  String    @id @default(cuid())
  date       DateTime   @default(now())
  nominalDay String
  userId     String 
  description String
  exercises TestExercise[]
  completed Boolean @default(false)
  //maybe add mesocycles and weeks for clumping/display?
  @@index([userId])
}

model TestExercise {
  exerciseId  String @id @default(cuid())
  date       DateTime   @default(now())
  description String
  weight      Int
  sets        String
  workoutId String
  workout TestWorkout  @relation(fields: [workoutId], references: [workoutId])

  @@index([workoutId])
}

model ModelWorkoutPlan {
  planId  String    @id @default(cuid())
  userId     String  @unique
  workouts ModelWorkout[]
  @@index([userId])
}

model ModelWorkout {
  workoutId  String    @id @default(cuid())
  date       DateTime   @default(now())
  nominalDay String @unique
  userId     String 
  description String
  exercises ModelExercise[]
  workoutPlan  ModelWorkoutPlan  @relation(fields: [userId], references: [userId])


  //maybe add mesocycles and weeks for clumping/display?
  @@index([userId, nominalDay])
}

model ModelExercise {
  exerciseId  String @id @default(cuid())
  date       DateTime   @default(now())
  description String
  weight      Int?
  sets        Int
  workoutId String
  workout ModelWorkout    @relation(fields: [workoutId], references: [workoutId])
  userId String

  previousExercise   ModelExercise? @relation("previousExercise", fields: [previousExerciseId], references: [exerciseId], onDelete: NoAction, onUpdate: NoAction)
  previousExerciseId String? @unique
  nextExercise       ModelExercise? @relation("previousExercise")
  nextExerciseId     String?

  @@index([workoutId, userId])
}

model ActualWorkout {
  workoutId  String    @id @default(cuid())
  date       DateTime   @default(now())
  nominalDay String
  userId     String 
  description String
  exercises ActualExercise[]
  workoutNumber Int?

  @@index([userId])
  @@index([date])
}

model ActualExercise {
  exerciseId  String @id @default(cuid())
  date       DateTime   @default(now())
  description String
  sets        exerciseSet[]
  
  workoutId String
  workout ActualWorkout    @relation(fields: [workoutId], references: [workoutId], onDelete: Cascade)

  previousExercise   ActualExercise? @relation("previousExercise", fields: [previousExerciseId], references: [exerciseId], onDelete: NoAction, onUpdate: NoAction)
  previousExerciseId String? @unique
  nextExercise       ActualExercise? @relation("previousExercise")
  nextExerciseId     String?

  @@index([workoutId])
}

model exerciseSet {
  setId String @id @default(cuid())
  exerciseId String
  weight Int
  reps Int
  rir Int
  exercise  ActualExercise  @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)

  @@index([exerciseId])
}