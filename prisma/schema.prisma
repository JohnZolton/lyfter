// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_DB_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_DB_URL_NON_POOLING") // uses a direct connection
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  provider String
  providerAccountId String
  type              String
  success           Boolean?
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String?
  k1           String? @unique
  state        String?
  userId       String?
  pubkey       String?
  sig          String?
  success      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([k1, userId])
}

model User {
  id  String @id @default(cuid())
  name String?
  pubkey String? @unique
  image         String?
  email String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  @@index([name, pubkey])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model WorkoutPlan {
  planId      String          @id @default(cuid())
  date        DateTime        @default(now())
  userId      String
  description String
  workouts    Workout[]

  @@index([userId, planId])
}

model Workout {
  workoutId         String           @id @default(cuid())
  date              DateTime         @default(now())
  nominalDay        String
  userId            String
  description       String
  exercises         Exercise[]
  workoutNumber     Int?
  planId            String?
  plan              WorkoutPlan?  @relation(fields: [planId], references: [planId], onDelete: Cascade)
  originalWorkoutId String?

  @@index([userId])
  @@index([date])
  @@index([planId])
  @@index([workoutId])
}

model Exercise {
  exerciseId  String        @id @default(cuid())
  date        DateTime      @default(now())
  description String
  sets        exerciseSet[]
  exerciseOrder Int
  muscleGroup MuscleGroup
  workoutId String
  feedbackRecorded Boolean @default(false)
  pump Pump?
  RPE RPE?
  workout   Workout @relation(fields: [workoutId], references: [workoutId], onDelete: Cascade)

  @@index([workoutId])
}

enum MuscleGroup {
  Chest
  Triceps
  Back
  Biceps
  Shoulders
  Abs
  Quads
  Glutes
  Hamstrings
  Calves
}
enum Pump {
  low
  medium
  high
}
 enum RPE {
  easy
  medium
  hard
 }

model exerciseSet {
  setId      String         @id @default(cuid())
  date       DateTime       @default(now())
  exerciseId String
  weight     Int?
  targetWeight     Int?
  reps       Int?
  targetReps Int?
  rir        Int?
  setNumber  Int
  exercise   Exercise @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)
  lastSetId  String?        @unique
  priorSet   exerciseSet?   @relation("SetRelation", fields: [lastSetId], references: [setId], onDelete: NoAction, onUpdate: NoAction)
  nextSet    exerciseSet?   @relation("SetRelation")

  @@index([exerciseId, setId])
}
